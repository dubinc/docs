openapi: "3.0.3"
info:
  title: "Dub.co API"
  description: "Dub is link management infrastructure for companies to create marketing campaigns, link sharing features, and referral programs."
  version: "0.0.1"
  contact:
    name: "Dub.co Support"
    email: "support@dub.co"
    url: "https://dub.co/api"
  license:
    name: "AGPL-3.0 license"
    url: "https://github.com/dubinc/dub/blob/main/LICENSE.md"
servers:
  - url: "https://api.dub.co"
    description: "Production API"
paths:
  "/links":
    post:
      operationId: "createLink"
      x-speakeasy-name-override: "create"
      x-speakeasy-usage-example: true
      summary: "Create a new link"
      x-codeSamples: [{"lang": "typescript", "label": "createLink", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.create({\n    url: \"https://google.com\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "createLink", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.CreateLinkRequestBody = &operations.CreateLinkRequestBody{\n        URL: \"https://google.com\",\n        ExternalID: dubgo.String(\"123456\"),\n        TagIds: operations.CreateTagIdsArrayOfStr(\n                []string{\n                    \"clux0rgak00011...\",\n                },\n        ),\n    }\n    ctx := context.Background()\n    res, err := s.Links.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "createLink", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::CreateLinkRequestBody.new(\n  url: \"https://google.com\",\n  external_id: \"123456\",\n  tag_ids: [\n  \"<value>\",\n],\n)\n    \nres = s.links.create(req)\n\nif ! res.link_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "createLink", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\CreateLinkRequestBody();\n    $request->url = 'https://google.com';\n    $request->domain = 'lighthearted-kilogram.name';\n    $request->key = '<key>';\n    $request->externalId = '123456';\n    $request->prefix = '<value>';\n    $request->trackConversion = false;\n    $request->archived = false;\n    $request->publicStats = false;\n    $request->tagId = '<value>';\n    $request->tagIds = [\n        '<value>',\n    ];\n    $request->tagNames = '<value>';\n    $request->comments = '<value>';\n    $request->expiresAt = '<value>';\n    $request->expiredUrl = '<value>';\n    $request->password = 'rHklDuL1dlrnUXo';\n    $request->proxy = false;\n    $request->title = '<value>';\n    $request->description = 'Reverse-engineered human-resource time-frame';\n    $request->image = 'https://loremflickr.com/640/480';\n    $request->video = '<value>';\n    $request->rewrite = false;\n    $request->ios = '<value>';\n    $request->android = '<value>';\n    $request->geo = new Components\\LinkGeoTargeting();\n    $request->geo->af = '<value>';\n    $request->geo->al = '<value>';\n    $request->geo->dz = '<value>';\n    $request->geo->as = '<value>';\n    $request->geo->ad = '<value>';\n    $request->geo->ao = '<value>';\n    $request->geo->ai = '<value>';\n    $request->geo->aq = '<value>';\n    $request->geo->ag = '<value>';\n    $request->geo->ar = '<value>';\n    $request->geo->am = '<value>';\n    $request->geo->aw = '<value>';\n    $request->geo->au = '<value>';\n    $request->geo->at = '<value>';\n    $request->geo->az = '<value>';\n    $request->geo->bs = '<value>';\n    $request->geo->bh = '<value>';\n    $request->geo->bd = '<value>';\n    $request->geo->bb = '<value>';\n    $request->geo->by = '<value>';\n    $request->geo->be = '<value>';\n    $request->geo->bz = '<value>';\n    $request->geo->bj = '<value>';\n    $request->geo->bm = '<value>';\n    $request->geo->bt = '<value>';\n    $request->geo->bo = '<value>';\n    $request->geo->ba = '<value>';\n    $request->geo->bw = '<value>';\n    $request->geo->bv = '<value>';\n    $request->geo->br = '<value>';\n    $request->geo->io = '<value>';\n    $request->geo->bn = '<value>';\n    $request->geo->bg = '<value>';\n    $request->geo->bf = '<value>';\n    $request->geo->bi = '<value>';\n    $request->geo->kh = '<value>';\n    $request->geo->cm = '<value>';\n    $request->geo->ca = '<value>';\n    $request->geo->cv = '<value>';\n    $request->geo->ky = '<value>';\n    $request->geo->cf = '<value>';\n    $request->geo->td = '<value>';\n    $request->geo->cl = '<value>';\n    $request->geo->cn = '<value>';\n    $request->geo->cx = '<value>';\n    $request->geo->cc = '<value>';\n    $request->geo->co = '<value>';\n    $request->geo->km = '<value>';\n    $request->geo->cg = '<value>';\n    $request->geo->cd = '<value>';\n    $request->geo->ck = '<value>';\n    $request->geo->cr = '<value>';\n    $request->geo->ci = '<value>';\n    $request->geo->hr = '<value>';\n    $request->geo->cu = '<value>';\n    $request->geo->cy = '<value>';\n    $request->geo->cz = '<value>';\n    $request->geo->dk = '<value>';\n    $request->geo->dj = '<value>';\n    $request->geo->dm = '<value>';\n    $request->geo->do = '<value>';\n    $request->geo->ec = '<value>';\n    $request->geo->eg = '<value>';\n    $request->geo->sv = '<value>';\n    $request->geo->gq = '<value>';\n    $request->geo->er = '<value>';\n    $request->geo->ee = '<value>';\n    $request->geo->et = '<value>';\n    $request->geo->fk = '<value>';\n    $request->geo->fo = '<value>';\n    $request->geo->fj = '<value>';\n    $request->geo->fi = '<value>';\n    $request->geo->fr = '<value>';\n    $request->geo->gf = '<value>';\n    $request->geo->pf = '<value>';\n    $request->geo->tf = '<value>';\n    $request->geo->ga = '<value>';\n    $request->geo->gm = '<value>';\n    $request->geo->ge = '<value>';\n    $request->geo->de = '<value>';\n    $request->geo->gh = '<value>';\n    $request->geo->gi = '<value>';\n    $request->geo->gr = '<value>';\n    $request->geo->gl = '<value>';\n    $request->geo->gd = '<value>';\n    $request->geo->gp = '<value>';\n    $request->geo->gu = '<value>';\n    $request->geo->gt = '<value>';\n    $request->geo->gn = '<value>';\n    $request->geo->gw = '<value>';\n    $request->geo->gy = '<value>';\n    $request->geo->ht = '<value>';\n    $request->geo->hm = '<value>';\n    $request->geo->va = '<value>';\n    $request->geo->hn = '<value>';\n    $request->geo->hk = '<value>';\n    $request->geo->hu = '<value>';\n    $request->geo->is = '<value>';\n    $request->geo->in = '<value>';\n    $request->geo->id = '<id>';\n    $request->geo->ir = '<value>';\n    $request->geo->iq = '<value>';\n    $request->geo->ie = '<value>';\n    $request->geo->il = '<value>';\n    $request->geo->it = '<value>';\n    $request->geo->jm = '<value>';\n    $request->geo->jp = '<value>';\n    $request->geo->jo = '<value>';\n    $request->geo->kz = '<value>';\n    $request->geo->ke = '<value>';\n    $request->geo->ki = '<value>';\n    $request->geo->kp = '<value>';\n    $request->geo->kr = '<value>';\n    $request->geo->kw = '<value>';\n    $request->geo->kg = '<value>';\n    $request->geo->la = '<value>';\n    $request->geo->lv = '<value>';\n    $request->geo->lb = '<value>';\n    $request->geo->ls = '<value>';\n    $request->geo->lr = '<value>';\n    $request->geo->ly = '<value>';\n    $request->geo->li = '<value>';\n    $request->geo->lt = '<value>';\n    $request->geo->lu = '<value>';\n    $request->geo->mo = '<value>';\n    $request->geo->mg = '<value>';\n    $request->geo->mw = '<value>';\n    $request->geo->my = '<value>';\n    $request->geo->mv = '<value>';\n    $request->geo->ml = '<value>';\n    $request->geo->mt = '<value>';\n    $request->geo->mh = '<value>';\n    $request->geo->mq = '<value>';\n    $request->geo->mr = '<value>';\n    $request->geo->mu = '<value>';\n    $request->geo->yt = '<value>';\n    $request->geo->mx = '<value>';\n    $request->geo->fm = '<value>';\n    $request->geo->md = '<value>';\n    $request->geo->mc = '<value>';\n    $request->geo->mn = '<value>';\n    $request->geo->ms = '<value>';\n    $request->geo->ma = '<value>';\n    $request->geo->mz = '<value>';\n    $request->geo->mm = '<value>';\n    $request->geo->na = '<value>';\n    $request->geo->nr = '<value>';\n    $request->geo->np = '<value>';\n    $request->geo->nl = '<value>';\n    $request->geo->nc = '<value>';\n    $request->geo->nz = '<value>';\n    $request->geo->ni = '<value>';\n    $request->geo->ne = '<value>';\n    $request->geo->ng = '<value>';\n    $request->geo->nu = '<value>';\n    $request->geo->nf = '<value>';\n    $request->geo->mk = '<value>';\n    $request->geo->mp = '<value>';\n    $request->geo->no = '<value>';\n    $request->geo->om = '<value>';\n    $request->geo->pk = '<value>';\n    $request->geo->pw = '<value>';\n    $request->geo->ps = '<value>';\n    $request->geo->pa = '<value>';\n    $request->geo->pg = '<value>';\n    $request->geo->py = '<value>';\n    $request->geo->pe = '<value>';\n    $request->geo->ph = '<value>';\n    $request->geo->pn = '<value>';\n    $request->geo->pl = '<value>';\n    $request->geo->pt = '<value>';\n    $request->geo->pr = '<value>';\n    $request->geo->qa = '<value>';\n    $request->geo->re = '<value>';\n    $request->geo->ro = '<value>';\n    $request->geo->ru = '<value>';\n    $request->geo->rw = '<value>';\n    $request->geo->sh = '<value>';\n    $request->geo->kn = '<value>';\n    $request->geo->lc = '<value>';\n    $request->geo->pm = '<value>';\n    $request->geo->vc = '<value>';\n    $request->geo->ws = '<value>';\n    $request->geo->sm = '<value>';\n    $request->geo->st = '<value>';\n    $request->geo->sa = '<value>';\n    $request->geo->sn = '<value>';\n    $request->geo->sc = '<value>';\n    $request->geo->sl = '<value>';\n    $request->geo->sg = '<value>';\n    $request->geo->sk = '<value>';\n    $request->geo->si = '<value>';\n    $request->geo->sb = '<value>';\n    $request->geo->so = '<value>';\n    $request->geo->za = '<value>';\n    $request->geo->gs = '<value>';\n    $request->geo->es = '<value>';\n    $request->geo->lk = '<value>';\n    $request->geo->sd = '<value>';\n    $request->geo->sr = '<value>';\n    $request->geo->sj = '<value>';\n    $request->geo->sz = '<value>';\n    $request->geo->se = '<value>';\n    $request->geo->ch = '<value>';\n    $request->geo->sy = '<value>';\n    $request->geo->tw = '<value>';\n    $request->geo->tj = '<value>';\n    $request->geo->tz = '<value>';\n    $request->geo->th = '<value>';\n    $request->geo->tl = '<value>';\n    $request->geo->tg = '<value>';\n    $request->geo->tk = '<value>';\n    $request->geo->to = '<value>';\n    $request->geo->tt = '<value>';\n    $request->geo->tn = '<value>';\n    $request->geo->tr = '<value>';\n    $request->geo->tm = '<value>';\n    $request->geo->tc = '<value>';\n    $request->geo->tv = '<value>';\n    $request->geo->ug = '<value>';\n    $request->geo->ua = '<value>';\n    $request->geo->ae = '<value>';\n    $request->geo->gb = '<value>';\n    $request->geo->us = '<value>';\n    $request->geo->um = '<value>';\n    $request->geo->uy = '<value>';\n    $request->geo->uz = '<value>';\n    $request->geo->vu = '<value>';\n    $request->geo->ve = '<value>';\n    $request->geo->vn = '<value>';\n    $request->geo->vg = '<value>';\n    $request->geo->vi = '<value>';\n    $request->geo->wf = '<value>';\n    $request->geo->eh = '<value>';\n    $request->geo->ye = '<value>';\n    $request->geo->zm = '<value>';\n    $request->geo->zw = '<value>';\n    $request->geo->ax = '<value>';\n    $request->geo->bq = '<value>';\n    $request->geo->cw = '<value>';\n    $request->geo->gg = '<value>';\n    $request->geo->im = '<value>';\n    $request->geo->je = '<value>';\n    $request->geo->me = '<value>';\n    $request->geo->bl = '<value>';\n    $request->geo->mf = '<value>';\n    $request->geo->rs = '<value>';\n    $request->geo->sx = '<value>';\n    $request->geo->ss = '<value>';\n    $request->geo->xk = '<value>';\n    $request->doIndex = false;;\n\n    $response = $sdk->links->create($request);\n\n    if ($response->linkSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: createLink, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.create(request={\n    \"url\": \"https://google.com\",\n    \"external_id\": \"123456\",\n    \"tag_ids\": [\n        \"clux0rgak00011...\",\n    ],\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"url\\\":\\\"https://google.com\\\",\\\"domain\\\":\\\"string\\\",\\\"key\\\":\\\"string\\\",\\\"externalId\\\":\\\"123456\\\",\\\"prefix\\\":\\\"string\\\",\\\"trackConversion\\\":false,\\\"archived\\\":false,\\\"publicStats\\\":false,\\\"tagIds\\\":\\\"string\\\",\\\"tagNames\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"expiredUrl\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"proxy\\\":false,\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"image\\\":\\\"string\\\",\\\"video\\\":\\\"string\\\",\\\"rewrite\\\":false,\\\"ios\\\":\\\"string\\\",\\\"android\\\":\\\"string\\\",\\\"geo\\\":{\\\"AF\\\":\\\"string\\\",\\\"AL\\\":\\\"string\\\",\\\"DZ\\\":\\\"string\\\",\\\"AS\\\":\\\"string\\\",\\\"AD\\\":\\\"string\\\",\\\"AO\\\":\\\"string\\\",\\\"AI\\\":\\\"string\\\",\\\"AQ\\\":\\\"string\\\",\\\"AG\\\":\\\"string\\\",\\\"AR\\\":\\\"string\\\",\\\"AM\\\":\\\"string\\\",\\\"AW\\\":\\\"string\\\",\\\"AU\\\":\\\"string\\\",\\\"AT\\\":\\\"string\\\",\\\"AZ\\\":\\\"string\\\",\\\"BS\\\":\\\"string\\\",\\\"BH\\\":\\\"string\\\",\\\"BD\\\":\\\"string\\\",\\\"BB\\\":\\\"string\\\",\\\"BY\\\":\\\"string\\\",\\\"BE\\\":\\\"string\\\",\\\"BZ\\\":\\\"string\\\",\\\"BJ\\\":\\\"string\\\",\\\"BM\\\":\\\"string\\\",\\\"BT\\\":\\\"string\\\",\\\"BO\\\":\\\"string\\\",\\\"BA\\\":\\\"string\\\",\\\"BW\\\":\\\"string\\\",\\\"BV\\\":\\\"string\\\",\\\"BR\\\":\\\"string\\\",\\\"IO\\\":\\\"string\\\",\\\"BN\\\":\\\"string\\\",\\\"BG\\\":\\\"string\\\",\\\"BF\\\":\\\"string\\\",\\\"BI\\\":\\\"string\\\",\\\"KH\\\":\\\"string\\\",\\\"CM\\\":\\\"string\\\",\\\"CA\\\":\\\"string\\\",\\\"CV\\\":\\\"string\\\",\\\"KY\\\":\\\"string\\\",\\\"CF\\\":\\\"string\\\",\\\"TD\\\":\\\"string\\\",\\\"CL\\\":\\\"string\\\",\\\"CN\\\":\\\"string\\\",\\\"CX\\\":\\\"string\\\",\\\"CC\\\":\\\"string\\\",\\\"CO\\\":\\\"string\\\",\\\"KM\\\":\\\"string\\\",\\\"CG\\\":\\\"string\\\",\\\"CD\\\":\\\"string\\\",\\\"CK\\\":\\\"string\\\",\\\"CR\\\":\\\"string\\\",\\\"CI\\\":\\\"string\\\",\\\"HR\\\":\\\"string\\\",\\\"CU\\\":\\\"string\\\",\\\"CY\\\":\\\"string\\\",\\\"CZ\\\":\\\"string\\\",\\\"DK\\\":\\\"string\\\",\\\"DJ\\\":\\\"string\\\",\\\"DM\\\":\\\"string\\\",\\\"DO\\\":\\\"string\\\",\\\"EC\\\":\\\"string\\\",\\\"EG\\\":\\\"string\\\",\\\"SV\\\":\\\"string\\\",\\\"GQ\\\":\\\"string\\\",\\\"ER\\\":\\\"string\\\",\\\"EE\\\":\\\"string\\\",\\\"ET\\\":\\\"string\\\",\\\"FK\\\":\\\"string\\\",\\\"FO\\\":\\\"string\\\",\\\"FJ\\\":\\\"string\\\",\\\"FI\\\":\\\"string\\\",\\\"FR\\\":\\\"string\\\",\\\"GF\\\":\\\"string\\\",\\\"PF\\\":\\\"string\\\",\\\"TF\\\":\\\"string\\\",\\\"GA\\\":\\\"string\\\",\\\"GM\\\":\\\"string\\\",\\\"GE\\\":\\\"string\\\",\\\"DE\\\":\\\"string\\\",\\\"GH\\\":\\\"string\\\",\\\"GI\\\":\\\"string\\\",\\\"GR\\\":\\\"string\\\",\\\"GL\\\":\\\"string\\\",\\\"GD\\\":\\\"string\\\",\\\"GP\\\":\\\"string\\\",\\\"GU\\\":\\\"string\\\",\\\"GT\\\":\\\"string\\\",\\\"GN\\\":\\\"string\\\",\\\"GW\\\":\\\"string\\\",\\\"GY\\\":\\\"string\\\",\\\"HT\\\":\\\"string\\\",\\\"HM\\\":\\\"string\\\",\\\"VA\\\":\\\"string\\\",\\\"HN\\\":\\\"string\\\",\\\"HK\\\":\\\"string\\\",\\\"HU\\\":\\\"string\\\",\\\"IS\\\":\\\"string\\\",\\\"IN\\\":\\\"string\\\",\\\"ID\\\":\\\"string\\\",\\\"IR\\\":\\\"string\\\",\\\"IQ\\\":\\\"string\\\",\\\"IE\\\":\\\"string\\\",\\\"IL\\\":\\\"string\\\",\\\"IT\\\":\\\"string\\\",\\\"JM\\\":\\\"string\\\",\\\"JP\\\":\\\"string\\\",\\\"JO\\\":\\\"string\\\",\\\"KZ\\\":\\\"string\\\",\\\"KE\\\":\\\"string\\\",\\\"KI\\\":\\\"string\\\",\\\"KP\\\":\\\"string\\\",\\\"KR\\\":\\\"string\\\",\\\"KW\\\":\\\"string\\\",\\\"KG\\\":\\\"string\\\",\\\"LA\\\":\\\"string\\\",\\\"LV\\\":\\\"string\\\",\\\"LB\\\":\\\"string\\\",\\\"LS\\\":\\\"string\\\",\\\"LR\\\":\\\"string\\\",\\\"LY\\\":\\\"string\\\",\\\"LI\\\":\\\"string\\\",\\\"LT\\\":\\\"string\\\",\\\"LU\\\":\\\"string\\\",\\\"MO\\\":\\\"string\\\",\\\"MG\\\":\\\"string\\\",\\\"MW\\\":\\\"string\\\",\\\"MY\\\":\\\"string\\\",\\\"MV\\\":\\\"string\\\",\\\"ML\\\":\\\"string\\\",\\\"MT\\\":\\\"string\\\",\\\"MH\\\":\\\"string\\\",\\\"MQ\\\":\\\"string\\\",\\\"MR\\\":\\\"string\\\",\\\"MU\\\":\\\"string\\\",\\\"YT\\\":\\\"string\\\",\\\"MX\\\":\\\"string\\\",\\\"FM\\\":\\\"string\\\",\\\"MD\\\":\\\"string\\\",\\\"MC\\\":\\\"string\\\",\\\"MN\\\":\\\"string\\\",\\\"MS\\\":\\\"string\\\",\\\"MA\\\":\\\"string\\\",\\\"MZ\\\":\\\"string\\\",\\\"MM\\\":\\\"string\\\",\\\"NA\\\":\\\"string\\\",\\\"NR\\\":\\\"string\\\",\\\"NP\\\":\\\"string\\\",\\\"NL\\\":\\\"string\\\",\\\"NC\\\":\\\"string\\\",\\\"NZ\\\":\\\"string\\\",\\\"NI\\\":\\\"string\\\",\\\"NE\\\":\\\"string\\\",\\\"NG\\\":\\\"string\\\",\\\"NU\\\":\\\"string\\\",\\\"NF\\\":\\\"string\\\",\\\"MK\\\":\\\"string\\\",\\\"MP\\\":\\\"string\\\",\\\"NO\\\":\\\"string\\\",\\\"OM\\\":\\\"string\\\",\\\"PK\\\":\\\"string\\\",\\\"PW\\\":\\\"string\\\",\\\"PS\\\":\\\"string\\\",\\\"PA\\\":\\\"string\\\",\\\"PG\\\":\\\"string\\\",\\\"PY\\\":\\\"string\\\",\\\"PE\\\":\\\"string\\\",\\\"PH\\\":\\\"string\\\",\\\"PN\\\":\\\"string\\\",\\\"PL\\\":\\\"string\\\",\\\"PT\\\":\\\"string\\\",\\\"PR\\\":\\\"string\\\",\\\"QA\\\":\\\"string\\\",\\\"RE\\\":\\\"string\\\",\\\"RO\\\":\\\"string\\\",\\\"RU\\\":\\\"string\\\",\\\"RW\\\":\\\"string\\\",\\\"SH\\\":\\\"string\\\",\\\"KN\\\":\\\"string\\\",\\\"LC\\\":\\\"string\\\",\\\"PM\\\":\\\"string\\\",\\\"VC\\\":\\\"string\\\",\\\"WS\\\":\\\"string\\\",\\\"SM\\\":\\\"string\\\",\\\"ST\\\":\\\"string\\\",\\\"SA\\\":\\\"string\\\",\\\"SN\\\":\\\"string\\\",\\\"SC\\\":\\\"string\\\",\\\"SL\\\":\\\"string\\\",\\\"SG\\\":\\\"string\\\",\\\"SK\\\":\\\"string\\\",\\\"SI\\\":\\\"string\\\",\\\"SB\\\":\\\"string\\\",\\\"SO\\\":\\\"string\\\",\\\"ZA\\\":\\\"string\\\",\\\"GS\\\":\\\"string\\\",\\\"ES\\\":\\\"string\\\",\\\"LK\\\":\\\"string\\\",\\\"SD\\\":\\\"string\\\",\\\"SR\\\":\\\"string\\\",\\\"SJ\\\":\\\"string\\\",\\\"SZ\\\":\\\"string\\\",\\\"SE\\\":\\\"string\\\",\\\"CH\\\":\\\"string\\\",\\\"SY\\\":\\\"string\\\",\\\"TW\\\":\\\"string\\\",\\\"TJ\\\":\\\"string\\\",\\\"TZ\\\":\\\"string\\\",\\\"TH\\\":\\\"string\\\",\\\"TL\\\":\\\"string\\\",\\\"TG\\\":\\\"string\\\",\\\"TK\\\":\\\"string\\\",\\\"TO\\\":\\\"string\\\",\\\"TT\\\":\\\"string\\\",\\\"TN\\\":\\\"string\\\",\\\"TR\\\":\\\"string\\\",\\\"TM\\\":\\\"string\\\",\\\"TC\\\":\\\"string\\\",\\\"TV\\\":\\\"string\\\",\\\"UG\\\":\\\"string\\\",\\\"UA\\\":\\\"string\\\",\\\"AE\\\":\\\"string\\\",\\\"GB\\\":\\\"string\\\",\\\"US\\\":\\\"string\\\",\\\"UM\\\":\\\"string\\\",\\\"UY\\\":\\\"string\\\",\\\"UZ\\\":\\\"string\\\",\\\"VU\\\":\\\"string\\\",\\\"VE\\\":\\\"string\\\",\\\"VN\\\":\\\"string\\\",\\\"VG\\\":\\\"string\\\",\\\"VI\\\":\\\"string\\\",\\\"WF\\\":\\\"string\\\",\\\"EH\\\":\\\"string\\\",\\\"YE\\\":\\\"string\\\",\\\"ZM\\\":\\\"string\\\",\\\"ZW\\\":\\\"string\\\",\\\"AX\\\":\\\"string\\\",\\\"BQ\\\":\\\"string\\\",\\\"CW\\\":\\\"string\\\",\\\"GG\\\":\\\"string\\\",\\\"IM\\\":\\\"string\\\",\\\"JE\\\":\\\"string\\\",\\\"ME\\\":\\\"string\\\",\\\"BL\\\":\\\"string\\\",\\\"MF\\\":\\\"string\\\",\\\"RS\\\":\\\"string\\\",\\\"SX\\\":\\\"string\\\",\\\"SS\\\":\\\"string\\\",\\\"XK\\\":\\\"string\\\"},\\\"doIndex\\\":false}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links\")\n  .post(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Create a new link for the authenticated workspace."
      tags:
        - "Links"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "url":
                  type: "string"
                  description: "The destination URL of the short link."
                  example: "https://google.com"
                "domain":
                  type: "string"
                  description: "The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains)."
                "key":
                  type: "string"
                  description: "The short link slug. If not provided, a random 7-character slug will be generated."
                "externalId":
                  type: "string"
                  nullable: true
                  minLength: 1
                  maxLength: 255
                  description: "This is the ID of the link in your database. If set, it can be used to identify the link in the future. Must be prefixed with `ext_` when passed as a query parameter."
                  example: "123456"
                "prefix":
                  type: "string"
                  description: "The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided."
                "trackConversion":
                  type: "boolean"
                  default: false
                  description: "Whether to track conversions for the short link."
                "archived":
                  type: "boolean"
                  default: false
                  description: "Whether the short link is archived."
                "publicStats":
                  type: "boolean"
                  default: false
                  description: "Whether the short link's stats are publicly accessible."
                "tagId":
                  type: "string"
                  nullable: true
                  description: "The unique ID of the tag assigned to the short link. This field is deprecated – use `tagIds` instead."
                  deprecated: true
                "tagIds":
                  anyOf:
                    - type: "string"
                    - type: "array"
                      items:
                        type: "string"
                  description: "The unique IDs of the tags assigned to the short link."
                  example: ["clux0rgak00011..."]
                "tagNames":
                  anyOf:
                    - type: "string"
                    - type: "array"
                      items:
                        type: "string"
                  description: "The unique name of the tags assigned to the short link (case insensitive)."
                "comments":
                  type: "string"
                  nullable: true
                  description: "The comments for the short link."
                "expiresAt":
                  type: "string"
                  nullable: true
                  description: "The date and time when the short link will expire at."
                "expiredUrl":
                  type: "string"
                  nullable: true
                  description: "The URL to redirect to when the short link has expired."
                "password":
                  type: "string"
                  nullable: true
                  description: "The password required to access the destination URL of the short link."
                "proxy":
                  type: "boolean"
                  default: false
                  description: "Whether the short link uses Custom Social Media Cards feature."
                "title":
                  type: "string"
                  nullable: true
                  description: "The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "description":
                  type: "string"
                  nullable: true
                  description: "The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "image":
                  type: "string"
                  nullable: true
                  description: "The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "video":
                  type: "string"
                  nullable: true
                  description: "The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "rewrite":
                  type: "boolean"
                  default: false
                  description: "Whether the short link uses link cloaking."
                "ios":
                  type: "string"
                  nullable: true
                  description: "The iOS destination URL for the short link for iOS device targeting."
                "android":
                  type: "string"
                  nullable: true
                  description: "The Android destination URL for the short link for Android device targeting."
                "geo": {"$ref": "#/components/schemas/linkGeoTargeting"}
                "doIndex":
                  type: "boolean"
                  default: false
                  description: "Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex"
              required:
                - "url"
      responses:
        "200":
          description: "The created link"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
    get:
      operationId: "getLinks"
      x-speakeasy-name-override: "list"
      summary: "Retrieve a list of links"
      x-codeSamples: [{"lang": "typescript", "label": "getLinks", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.list({});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "getLinks", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    request := operations.GetLinksRequest{}\n    ctx := context.Background()\n    res, err := s.Links.List(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "getLinks", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::GetLinksRequest.new()\n    \nres = s.links.list(req)\n\nif ! res.link_schemas.nil?\n  # handle response\nend"}, {"lang": "php", "label": "getLinks", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\GetLinksRequest();\n    $request->domain = 'smug-bow.name';\n    $request->tagId = '<value>';\n    $request->tagIds = '<value>';\n    $request->tagNames = '<value>';\n    $request->search = '<value>';\n    $request->userId = '<value>';\n    $request->showArchived = false;\n    $request->withTags = false;\n    $request->sort = Operations\\Sort::CreatedAt;\n    $request->page = 678317;;\n\n    $response = $sdk->links->list($request);\n\n    if ($response->linkSchemas !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: getLinks, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.list()\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve a paginated list of links for the authenticated workspace."
      tags:
        - "Links"
      security:
        - token: []
      parameters:
        - in: "query"
          name: "domain"
          description: "The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned."
          schema:
            type: "string"
            description: "The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned."
        - in: "query"
          name: "tagId"
          description: "The tag ID to filter the links by. This field is deprecated – use `tagIds` instead."
          schema:
            type: "string"
            description: "The tag ID to filter the links by. This field is deprecated – use `tagIds` instead."
            deprecated: true
        - in: "query"
          name: "tagIds"
          description: "The tag IDs to filter the links by."
          schema:
            anyOf:
              - type: "string"
              - type: "array"
                items:
                  type: "string"
            description: "The tag IDs to filter the links by."
        - in: "query"
          name: "tagNames"
          description: "The unique name of the tags assigned to the short link (case insensitive)."
          schema:
            anyOf:
              - type: "string"
              - type: "array"
                items:
                  type: "string"
            description: "The unique name of the tags assigned to the short link (case insensitive)."
        - in: "query"
          name: "search"
          description: "The search term to filter the links by. The search term will be matched against the short link slug and the destination url."
          schema:
            type: "string"
            description: "The search term to filter the links by. The search term will be matched against the short link slug and the destination url."
        - in: "query"
          name: "userId"
          description: "The user ID to filter the links by."
          schema:
            type: "string"
            description: "The user ID to filter the links by."
        - in: "query"
          name: "showArchived"
          description: "Whether to include archived links in the response. Defaults to `false` if not provided."
          schema:
            type: "boolean"
            default: "false"
            description: "Whether to include archived links in the response. Defaults to `false` if not provided."
        - in: "query"
          name: "withTags"
          description: "Whether to include tags in the response. Defaults to `false` if not provided."
          schema:
            type: "boolean"
            default: "false"
            description: "Whether to include tags in the response. Defaults to `false` if not provided."
        - in: "query"
          name: "sort"
          description: "The field to sort the links by. The default is `createdAt`, and sort order is always descending."
          schema:
            type: "string"
            enum:
              - "createdAt"
              - "clicks"
              - "lastClicked"
            default: "createdAt"
            description: "The field to sort the links by. The default is `createdAt`, and sort order is always descending."
        - in: "query"
          name: "page"
          description: "The page number for pagination (each page contains 100 links)."
          schema:
            type: "integer"
            minimum: 0
            description: "The page number for pagination (each page contains 100 links)."
      responses:
        "200":
          description: "A list of links"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/LinkSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/links/count":
    get:
      operationId: "getLinksCount"
      x-speakeasy-name-override: "count"
      summary: "Retrieve links count"
      x-codeSamples: [{"lang": "typescript", "label": "getLinksCount", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.count({});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "getLinksCount", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    request := operations.GetLinksCountRequest{}\n    ctx := context.Background()\n    res, err := s.Links.Count(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "getLinksCount", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::GetLinksCountRequest.new()\n    \nres = s.links.count(req)\n\nif ! res.number.nil?\n  # handle response\nend"}, {"lang": "php", "label": "getLinksCount", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\GetLinksCountRequest();\n    $request->domain = 'false-epauliere.info';\n    $request->tagId = '<value>';\n    $request->tagIds = '<value>';\n    $request->tagNames = '<value>';\n    $request->search = '<value>';\n    $request->userId = '<value>';\n    $request->showArchived = false;\n    $request->withTags = false;\n    $request->groupBy = '<value>';;\n\n    $response = $sdk->links->count($request);\n\n    if ($response->number !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: getLinksCount, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.count()\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links/count\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve the number of links for the authenticated workspace."
      tags:
        - "Links"
      security:
        - token: []
      parameters:
        - in: "query"
          name: "domain"
          description: "The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned."
          schema:
            type: "string"
            description: "The domain to filter the links by. E.g. `ac.me`. If not provided, all links for the workspace will be returned."
        - in: "query"
          name: "tagId"
          description: "The tag ID to filter the links by. This field is deprecated – use `tagIds` instead."
          schema:
            type: "string"
            description: "The tag ID to filter the links by. This field is deprecated – use `tagIds` instead."
            deprecated: true
        - in: "query"
          name: "tagIds"
          description: "The tag IDs to filter the links by."
          schema:
            anyOf:
              - type: "string"
              - type: "array"
                items:
                  type: "string"
            description: "The tag IDs to filter the links by."
        - in: "query"
          name: "tagNames"
          description: "The unique name of the tags assigned to the short link (case insensitive)."
          schema:
            anyOf:
              - type: "string"
              - type: "array"
                items:
                  type: "string"
            description: "The unique name of the tags assigned to the short link (case insensitive)."
        - in: "query"
          name: "search"
          description: "The search term to filter the links by. The search term will be matched against the short link slug and the destination url."
          schema:
            type: "string"
            description: "The search term to filter the links by. The search term will be matched against the short link slug and the destination url."
        - in: "query"
          name: "userId"
          description: "The user ID to filter the links by."
          schema:
            type: "string"
            description: "The user ID to filter the links by."
        - in: "query"
          name: "showArchived"
          description: "Whether to include archived links in the response. Defaults to `false` if not provided."
          schema:
            type: "boolean"
            default: "false"
            description: "Whether to include archived links in the response. Defaults to `false` if not provided."
        - in: "query"
          name: "withTags"
          description: "Whether to include tags in the response. Defaults to `false` if not provided."
          schema:
            type: "boolean"
            default: "false"
            description: "Whether to include tags in the response. Defaults to `false` if not provided."
        - in: "query"
          name: "groupBy"
          description: "The field to group the links by."
          schema:
            anyOf:
              - type: "string"
                enum:
                  - "domain"
              - type: "string"
                enum:
                  - "tagId"
              - type: "string"
                enum:
                  - "userId"
            description: "The field to group the links by."
      responses:
        "200":
          description: "A list of links"
          content:
            "application/json":
              schema:
                type: "number"
                description: "The number of links matching the query."
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/links/info":
    get:
      operationId: "getLinkInfo"
      x-speakeasy-name-override: "get"
      summary: "Retrieve a link"
      x-codeSamples: [{"lang": "typescript", "label": "getLinkInfo", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.get({});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "getLinkInfo", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    request := operations.GetLinkInfoRequest{\n        LinkID: dubgo.String(\"clux0rgak00011...\"),\n        ExternalID: dubgo.String(\"ext_123456\"),\n    }\n    ctx := context.Background()\n    res, err := s.Links.Get(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "getLinkInfo", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::GetLinkInfoRequest.new(\n  link_id: \"clux0rgak00011...\",\n  external_id: \"ext_123456\",\n)\n    \nres = s.links.get(req)\n\nif ! res.link_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "getLinkInfo", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n    \n\n    $response = $sdk->links->get('<value>', '<value>', 'clux0rgak00011...', 'ext_123456');\n\n    if ($response->linkSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: getLinkInfo, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.get(request={\n    \"link_id\": \"clux0rgak00011...\",\n    \"external_id\": \"ext_123456\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links/info\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve the info for a link."
      tags:
        - "Links"
      security:
        - token: []
      parameters:
        - in: "query"
          name: "domain"
          schema:
            type: "string"
            minLength: 1
            description: "The domain of the link to retrieve. E.g. for `d.to/github`, the domain is `d.to`."
        - in: "query"
          name: "key"
          description: "The key of the link to retrieve. E.g. for `d.to/github`, the key is `github`."
          schema:
            type: "string"
            minLength: 1
            description: "The key of the link to retrieve. E.g. for `d.to/github`, the key is `github`."
        - in: "query"
          name: "linkId"
          description: "The unique ID of the short link."
          schema:
            type: "string"
            description: "The unique ID of the short link."
            example: "clux0rgak00011..."
        - in: "query"
          name: "externalId"
          description: "This is the ID of the link in the your database. Must be prefixed with `ext_` when passed as a query parameter."
          schema:
            type: "string"
            description: "This is the ID of the link in the your database. Must be prefixed with `ext_` when passed as a query parameter."
            example: "ext_123456"
      responses:
        "200":
          description: "The retrieved link"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/links/{linkId}":
    patch:
      operationId: "updateLink"
      x-speakeasy-name-override: "update"
      x-speakeasy-max-method-params: 2
      summary: "Update a link"
      x-codeSamples: [{"lang": "typescript", "label": "updateLink", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.update(\"<value>\", {});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "updateLink", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var linkID string = \"<value>\"\n\n    var requestBody *operations.UpdateLinkRequestBody = &operations.UpdateLinkRequestBody{\n        URL: dubgo.String(\"https://google.com\"),\n        ExternalID: dubgo.String(\"123456\"),\n        TagIds: operations.CreateUpdateLinkTagIdsArrayOfStr(\n                []string{\n                    \"clux0rgak00011...\",\n                },\n        ),\n    }\n    ctx := context.Background()\n    res, err := s.Links.Update(ctx, linkID, requestBody)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "updateLink", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.links.update(link_id=\"<value>\", request_body=::OpenApiSDK::Operations::UpdateLinkRequestBody.new(\n    url: \"https://google.com\",\n    external_id: \"123456\",\n    tag_ids: [\n    \"<value>\",\n  ],\n  ))\n\nif ! res.link_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "updateLink", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $requestBody = new Operations\\UpdateLinkRequestBody();\n    $requestBody->url = 'https://google.com';\n    $requestBody->domain = 'tidy-amazon.name';\n    $requestBody->key = '<key>';\n    $requestBody->externalId = '123456';\n    $requestBody->prefix = '<value>';\n    $requestBody->trackConversion = false;\n    $requestBody->archived = false;\n    $requestBody->publicStats = false;\n    $requestBody->tagId = '<value>';\n    $requestBody->tagIds = [\n        '<value>',\n    ];\n    $requestBody->tagNames = '<value>';\n    $requestBody->comments = '<value>';\n    $requestBody->expiresAt = '<value>';\n    $requestBody->expiredUrl = '<value>';\n    $requestBody->password = 'AdaOKvPKDk8CkuA';\n    $requestBody->proxy = false;\n    $requestBody->title = '<value>';\n    $requestBody->description = 'Front-line 24/7 implementation';\n    $requestBody->image = 'https://loremflickr.com/640/480';\n    $requestBody->video = '<value>';\n    $requestBody->rewrite = false;\n    $requestBody->ios = '<value>';\n    $requestBody->android = '<value>';\n    $requestBody->geo = new Components\\LinkGeoTargeting();\n    $requestBody->geo->af = '<value>';\n    $requestBody->geo->al = '<value>';\n    $requestBody->geo->dz = '<value>';\n    $requestBody->geo->as = '<value>';\n    $requestBody->geo->ad = '<value>';\n    $requestBody->geo->ao = '<value>';\n    $requestBody->geo->ai = '<value>';\n    $requestBody->geo->aq = '<value>';\n    $requestBody->geo->ag = '<value>';\n    $requestBody->geo->ar = '<value>';\n    $requestBody->geo->am = '<value>';\n    $requestBody->geo->aw = '<value>';\n    $requestBody->geo->au = '<value>';\n    $requestBody->geo->at = '<value>';\n    $requestBody->geo->az = '<value>';\n    $requestBody->geo->bs = '<value>';\n    $requestBody->geo->bh = '<value>';\n    $requestBody->geo->bd = '<value>';\n    $requestBody->geo->bb = '<value>';\n    $requestBody->geo->by = '<value>';\n    $requestBody->geo->be = '<value>';\n    $requestBody->geo->bz = '<value>';\n    $requestBody->geo->bj = '<value>';\n    $requestBody->geo->bm = '<value>';\n    $requestBody->geo->bt = '<value>';\n    $requestBody->geo->bo = '<value>';\n    $requestBody->geo->ba = '<value>';\n    $requestBody->geo->bw = '<value>';\n    $requestBody->geo->bv = '<value>';\n    $requestBody->geo->br = '<value>';\n    $requestBody->geo->io = '<value>';\n    $requestBody->geo->bn = '<value>';\n    $requestBody->geo->bg = '<value>';\n    $requestBody->geo->bf = '<value>';\n    $requestBody->geo->bi = '<value>';\n    $requestBody->geo->kh = '<value>';\n    $requestBody->geo->cm = '<value>';\n    $requestBody->geo->ca = '<value>';\n    $requestBody->geo->cv = '<value>';\n    $requestBody->geo->ky = '<value>';\n    $requestBody->geo->cf = '<value>';\n    $requestBody->geo->td = '<value>';\n    $requestBody->geo->cl = '<value>';\n    $requestBody->geo->cn = '<value>';\n    $requestBody->geo->cx = '<value>';\n    $requestBody->geo->cc = '<value>';\n    $requestBody->geo->co = '<value>';\n    $requestBody->geo->km = '<value>';\n    $requestBody->geo->cg = '<value>';\n    $requestBody->geo->cd = '<value>';\n    $requestBody->geo->ck = '<value>';\n    $requestBody->geo->cr = '<value>';\n    $requestBody->geo->ci = '<value>';\n    $requestBody->geo->hr = '<value>';\n    $requestBody->geo->cu = '<value>';\n    $requestBody->geo->cy = '<value>';\n    $requestBody->geo->cz = '<value>';\n    $requestBody->geo->dk = '<value>';\n    $requestBody->geo->dj = '<value>';\n    $requestBody->geo->dm = '<value>';\n    $requestBody->geo->do = '<value>';\n    $requestBody->geo->ec = '<value>';\n    $requestBody->geo->eg = '<value>';\n    $requestBody->geo->sv = '<value>';\n    $requestBody->geo->gq = '<value>';\n    $requestBody->geo->er = '<value>';\n    $requestBody->geo->ee = '<value>';\n    $requestBody->geo->et = '<value>';\n    $requestBody->geo->fk = '<value>';\n    $requestBody->geo->fo = '<value>';\n    $requestBody->geo->fj = '<value>';\n    $requestBody->geo->fi = '<value>';\n    $requestBody->geo->fr = '<value>';\n    $requestBody->geo->gf = '<value>';\n    $requestBody->geo->pf = '<value>';\n    $requestBody->geo->tf = '<value>';\n    $requestBody->geo->ga = '<value>';\n    $requestBody->geo->gm = '<value>';\n    $requestBody->geo->ge = '<value>';\n    $requestBody->geo->de = '<value>';\n    $requestBody->geo->gh = '<value>';\n    $requestBody->geo->gi = '<value>';\n    $requestBody->geo->gr = '<value>';\n    $requestBody->geo->gl = '<value>';\n    $requestBody->geo->gd = '<value>';\n    $requestBody->geo->gp = '<value>';\n    $requestBody->geo->gu = '<value>';\n    $requestBody->geo->gt = '<value>';\n    $requestBody->geo->gn = '<value>';\n    $requestBody->geo->gw = '<value>';\n    $requestBody->geo->gy = '<value>';\n    $requestBody->geo->ht = '<value>';\n    $requestBody->geo->hm = '<value>';\n    $requestBody->geo->va = '<value>';\n    $requestBody->geo->hn = '<value>';\n    $requestBody->geo->hk = '<value>';\n    $requestBody->geo->hu = '<value>';\n    $requestBody->geo->is = '<value>';\n    $requestBody->geo->in = '<value>';\n    $requestBody->geo->id = '<id>';\n    $requestBody->geo->ir = '<value>';\n    $requestBody->geo->iq = '<value>';\n    $requestBody->geo->ie = '<value>';\n    $requestBody->geo->il = '<value>';\n    $requestBody->geo->it = '<value>';\n    $requestBody->geo->jm = '<value>';\n    $requestBody->geo->jp = '<value>';\n    $requestBody->geo->jo = '<value>';\n    $requestBody->geo->kz = '<value>';\n    $requestBody->geo->ke = '<value>';\n    $requestBody->geo->ki = '<value>';\n    $requestBody->geo->kp = '<value>';\n    $requestBody->geo->kr = '<value>';\n    $requestBody->geo->kw = '<value>';\n    $requestBody->geo->kg = '<value>';\n    $requestBody->geo->la = '<value>';\n    $requestBody->geo->lv = '<value>';\n    $requestBody->geo->lb = '<value>';\n    $requestBody->geo->ls = '<value>';\n    $requestBody->geo->lr = '<value>';\n    $requestBody->geo->ly = '<value>';\n    $requestBody->geo->li = '<value>';\n    $requestBody->geo->lt = '<value>';\n    $requestBody->geo->lu = '<value>';\n    $requestBody->geo->mo = '<value>';\n    $requestBody->geo->mg = '<value>';\n    $requestBody->geo->mw = '<value>';\n    $requestBody->geo->my = '<value>';\n    $requestBody->geo->mv = '<value>';\n    $requestBody->geo->ml = '<value>';\n    $requestBody->geo->mt = '<value>';\n    $requestBody->geo->mh = '<value>';\n    $requestBody->geo->mq = '<value>';\n    $requestBody->geo->mr = '<value>';\n    $requestBody->geo->mu = '<value>';\n    $requestBody->geo->yt = '<value>';\n    $requestBody->geo->mx = '<value>';\n    $requestBody->geo->fm = '<value>';\n    $requestBody->geo->md = '<value>';\n    $requestBody->geo->mc = '<value>';\n    $requestBody->geo->mn = '<value>';\n    $requestBody->geo->ms = '<value>';\n    $requestBody->geo->ma = '<value>';\n    $requestBody->geo->mz = '<value>';\n    $requestBody->geo->mm = '<value>';\n    $requestBody->geo->na = '<value>';\n    $requestBody->geo->nr = '<value>';\n    $requestBody->geo->np = '<value>';\n    $requestBody->geo->nl = '<value>';\n    $requestBody->geo->nc = '<value>';\n    $requestBody->geo->nz = '<value>';\n    $requestBody->geo->ni = '<value>';\n    $requestBody->geo->ne = '<value>';\n    $requestBody->geo->ng = '<value>';\n    $requestBody->geo->nu = '<value>';\n    $requestBody->geo->nf = '<value>';\n    $requestBody->geo->mk = '<value>';\n    $requestBody->geo->mp = '<value>';\n    $requestBody->geo->no = '<value>';\n    $requestBody->geo->om = '<value>';\n    $requestBody->geo->pk = '<value>';\n    $requestBody->geo->pw = '<value>';\n    $requestBody->geo->ps = '<value>';\n    $requestBody->geo->pa = '<value>';\n    $requestBody->geo->pg = '<value>';\n    $requestBody->geo->py = '<value>';\n    $requestBody->geo->pe = '<value>';\n    $requestBody->geo->ph = '<value>';\n    $requestBody->geo->pn = '<value>';\n    $requestBody->geo->pl = '<value>';\n    $requestBody->geo->pt = '<value>';\n    $requestBody->geo->pr = '<value>';\n    $requestBody->geo->qa = '<value>';\n    $requestBody->geo->re = '<value>';\n    $requestBody->geo->ro = '<value>';\n    $requestBody->geo->ru = '<value>';\n    $requestBody->geo->rw = '<value>';\n    $requestBody->geo->sh = '<value>';\n    $requestBody->geo->kn = '<value>';\n    $requestBody->geo->lc = '<value>';\n    $requestBody->geo->pm = '<value>';\n    $requestBody->geo->vc = '<value>';\n    $requestBody->geo->ws = '<value>';\n    $requestBody->geo->sm = '<value>';\n    $requestBody->geo->st = '<value>';\n    $requestBody->geo->sa = '<value>';\n    $requestBody->geo->sn = '<value>';\n    $requestBody->geo->sc = '<value>';\n    $requestBody->geo->sl = '<value>';\n    $requestBody->geo->sg = '<value>';\n    $requestBody->geo->sk = '<value>';\n    $requestBody->geo->si = '<value>';\n    $requestBody->geo->sb = '<value>';\n    $requestBody->geo->so = '<value>';\n    $requestBody->geo->za = '<value>';\n    $requestBody->geo->gs = '<value>';\n    $requestBody->geo->es = '<value>';\n    $requestBody->geo->lk = '<value>';\n    $requestBody->geo->sd = '<value>';\n    $requestBody->geo->sr = '<value>';\n    $requestBody->geo->sj = '<value>';\n    $requestBody->geo->sz = '<value>';\n    $requestBody->geo->se = '<value>';\n    $requestBody->geo->ch = '<value>';\n    $requestBody->geo->sy = '<value>';\n    $requestBody->geo->tw = '<value>';\n    $requestBody->geo->tj = '<value>';\n    $requestBody->geo->tz = '<value>';\n    $requestBody->geo->th = '<value>';\n    $requestBody->geo->tl = '<value>';\n    $requestBody->geo->tg = '<value>';\n    $requestBody->geo->tk = '<value>';\n    $requestBody->geo->to = '<value>';\n    $requestBody->geo->tt = '<value>';\n    $requestBody->geo->tn = '<value>';\n    $requestBody->geo->tr = '<value>';\n    $requestBody->geo->tm = '<value>';\n    $requestBody->geo->tc = '<value>';\n    $requestBody->geo->tv = '<value>';\n    $requestBody->geo->ug = '<value>';\n    $requestBody->geo->ua = '<value>';\n    $requestBody->geo->ae = '<value>';\n    $requestBody->geo->gb = '<value>';\n    $requestBody->geo->us = '<value>';\n    $requestBody->geo->um = '<value>';\n    $requestBody->geo->uy = '<value>';\n    $requestBody->geo->uz = '<value>';\n    $requestBody->geo->vu = '<value>';\n    $requestBody->geo->ve = '<value>';\n    $requestBody->geo->vn = '<value>';\n    $requestBody->geo->vg = '<value>';\n    $requestBody->geo->vi = '<value>';\n    $requestBody->geo->wf = '<value>';\n    $requestBody->geo->eh = '<value>';\n    $requestBody->geo->ye = '<value>';\n    $requestBody->geo->zm = '<value>';\n    $requestBody->geo->zw = '<value>';\n    $requestBody->geo->ax = '<value>';\n    $requestBody->geo->bq = '<value>';\n    $requestBody->geo->cw = '<value>';\n    $requestBody->geo->gg = '<value>';\n    $requestBody->geo->im = '<value>';\n    $requestBody->geo->je = '<value>';\n    $requestBody->geo->me = '<value>';\n    $requestBody->geo->bl = '<value>';\n    $requestBody->geo->mf = '<value>';\n    $requestBody->geo->rs = '<value>';\n    $requestBody->geo->sx = '<value>';\n    $requestBody->geo->ss = '<value>';\n    $requestBody->geo->xk = '<value>';\n    $requestBody->doIndex = false;\n\n    $response = $sdk->links->update('<value>', $requestBody);\n\n    if ($response->linkSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: updateLink, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.update(link_id=\"<value>\", request_body={\n    \"url\": \"https://google.com\",\n    \"external_id\": \"123456\",\n    \"tag_ids\": [\n        \"clux0rgak00011...\",\n    ],\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"url\\\":\\\"https://google.com\\\",\\\"domain\\\":\\\"string\\\",\\\"key\\\":\\\"string\\\",\\\"externalId\\\":\\\"123456\\\",\\\"prefix\\\":\\\"string\\\",\\\"trackConversion\\\":false,\\\"archived\\\":false,\\\"publicStats\\\":false,\\\"tagIds\\\":\\\"string\\\",\\\"tagNames\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"expiredUrl\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"proxy\\\":false,\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"image\\\":\\\"string\\\",\\\"video\\\":\\\"string\\\",\\\"rewrite\\\":false,\\\"ios\\\":\\\"string\\\",\\\"android\\\":\\\"string\\\",\\\"geo\\\":{\\\"AF\\\":\\\"string\\\",\\\"AL\\\":\\\"string\\\",\\\"DZ\\\":\\\"string\\\",\\\"AS\\\":\\\"string\\\",\\\"AD\\\":\\\"string\\\",\\\"AO\\\":\\\"string\\\",\\\"AI\\\":\\\"string\\\",\\\"AQ\\\":\\\"string\\\",\\\"AG\\\":\\\"string\\\",\\\"AR\\\":\\\"string\\\",\\\"AM\\\":\\\"string\\\",\\\"AW\\\":\\\"string\\\",\\\"AU\\\":\\\"string\\\",\\\"AT\\\":\\\"string\\\",\\\"AZ\\\":\\\"string\\\",\\\"BS\\\":\\\"string\\\",\\\"BH\\\":\\\"string\\\",\\\"BD\\\":\\\"string\\\",\\\"BB\\\":\\\"string\\\",\\\"BY\\\":\\\"string\\\",\\\"BE\\\":\\\"string\\\",\\\"BZ\\\":\\\"string\\\",\\\"BJ\\\":\\\"string\\\",\\\"BM\\\":\\\"string\\\",\\\"BT\\\":\\\"string\\\",\\\"BO\\\":\\\"string\\\",\\\"BA\\\":\\\"string\\\",\\\"BW\\\":\\\"string\\\",\\\"BV\\\":\\\"string\\\",\\\"BR\\\":\\\"string\\\",\\\"IO\\\":\\\"string\\\",\\\"BN\\\":\\\"string\\\",\\\"BG\\\":\\\"string\\\",\\\"BF\\\":\\\"string\\\",\\\"BI\\\":\\\"string\\\",\\\"KH\\\":\\\"string\\\",\\\"CM\\\":\\\"string\\\",\\\"CA\\\":\\\"string\\\",\\\"CV\\\":\\\"string\\\",\\\"KY\\\":\\\"string\\\",\\\"CF\\\":\\\"string\\\",\\\"TD\\\":\\\"string\\\",\\\"CL\\\":\\\"string\\\",\\\"CN\\\":\\\"string\\\",\\\"CX\\\":\\\"string\\\",\\\"CC\\\":\\\"string\\\",\\\"CO\\\":\\\"string\\\",\\\"KM\\\":\\\"string\\\",\\\"CG\\\":\\\"string\\\",\\\"CD\\\":\\\"string\\\",\\\"CK\\\":\\\"string\\\",\\\"CR\\\":\\\"string\\\",\\\"CI\\\":\\\"string\\\",\\\"HR\\\":\\\"string\\\",\\\"CU\\\":\\\"string\\\",\\\"CY\\\":\\\"string\\\",\\\"CZ\\\":\\\"string\\\",\\\"DK\\\":\\\"string\\\",\\\"DJ\\\":\\\"string\\\",\\\"DM\\\":\\\"string\\\",\\\"DO\\\":\\\"string\\\",\\\"EC\\\":\\\"string\\\",\\\"EG\\\":\\\"string\\\",\\\"SV\\\":\\\"string\\\",\\\"GQ\\\":\\\"string\\\",\\\"ER\\\":\\\"string\\\",\\\"EE\\\":\\\"string\\\",\\\"ET\\\":\\\"string\\\",\\\"FK\\\":\\\"string\\\",\\\"FO\\\":\\\"string\\\",\\\"FJ\\\":\\\"string\\\",\\\"FI\\\":\\\"string\\\",\\\"FR\\\":\\\"string\\\",\\\"GF\\\":\\\"string\\\",\\\"PF\\\":\\\"string\\\",\\\"TF\\\":\\\"string\\\",\\\"GA\\\":\\\"string\\\",\\\"GM\\\":\\\"string\\\",\\\"GE\\\":\\\"string\\\",\\\"DE\\\":\\\"string\\\",\\\"GH\\\":\\\"string\\\",\\\"GI\\\":\\\"string\\\",\\\"GR\\\":\\\"string\\\",\\\"GL\\\":\\\"string\\\",\\\"GD\\\":\\\"string\\\",\\\"GP\\\":\\\"string\\\",\\\"GU\\\":\\\"string\\\",\\\"GT\\\":\\\"string\\\",\\\"GN\\\":\\\"string\\\",\\\"GW\\\":\\\"string\\\",\\\"GY\\\":\\\"string\\\",\\\"HT\\\":\\\"string\\\",\\\"HM\\\":\\\"string\\\",\\\"VA\\\":\\\"string\\\",\\\"HN\\\":\\\"string\\\",\\\"HK\\\":\\\"string\\\",\\\"HU\\\":\\\"string\\\",\\\"IS\\\":\\\"string\\\",\\\"IN\\\":\\\"string\\\",\\\"ID\\\":\\\"string\\\",\\\"IR\\\":\\\"string\\\",\\\"IQ\\\":\\\"string\\\",\\\"IE\\\":\\\"string\\\",\\\"IL\\\":\\\"string\\\",\\\"IT\\\":\\\"string\\\",\\\"JM\\\":\\\"string\\\",\\\"JP\\\":\\\"string\\\",\\\"JO\\\":\\\"string\\\",\\\"KZ\\\":\\\"string\\\",\\\"KE\\\":\\\"string\\\",\\\"KI\\\":\\\"string\\\",\\\"KP\\\":\\\"string\\\",\\\"KR\\\":\\\"string\\\",\\\"KW\\\":\\\"string\\\",\\\"KG\\\":\\\"string\\\",\\\"LA\\\":\\\"string\\\",\\\"LV\\\":\\\"string\\\",\\\"LB\\\":\\\"string\\\",\\\"LS\\\":\\\"string\\\",\\\"LR\\\":\\\"string\\\",\\\"LY\\\":\\\"string\\\",\\\"LI\\\":\\\"string\\\",\\\"LT\\\":\\\"string\\\",\\\"LU\\\":\\\"string\\\",\\\"MO\\\":\\\"string\\\",\\\"MG\\\":\\\"string\\\",\\\"MW\\\":\\\"string\\\",\\\"MY\\\":\\\"string\\\",\\\"MV\\\":\\\"string\\\",\\\"ML\\\":\\\"string\\\",\\\"MT\\\":\\\"string\\\",\\\"MH\\\":\\\"string\\\",\\\"MQ\\\":\\\"string\\\",\\\"MR\\\":\\\"string\\\",\\\"MU\\\":\\\"string\\\",\\\"YT\\\":\\\"string\\\",\\\"MX\\\":\\\"string\\\",\\\"FM\\\":\\\"string\\\",\\\"MD\\\":\\\"string\\\",\\\"MC\\\":\\\"string\\\",\\\"MN\\\":\\\"string\\\",\\\"MS\\\":\\\"string\\\",\\\"MA\\\":\\\"string\\\",\\\"MZ\\\":\\\"string\\\",\\\"MM\\\":\\\"string\\\",\\\"NA\\\":\\\"string\\\",\\\"NR\\\":\\\"string\\\",\\\"NP\\\":\\\"string\\\",\\\"NL\\\":\\\"string\\\",\\\"NC\\\":\\\"string\\\",\\\"NZ\\\":\\\"string\\\",\\\"NI\\\":\\\"string\\\",\\\"NE\\\":\\\"string\\\",\\\"NG\\\":\\\"string\\\",\\\"NU\\\":\\\"string\\\",\\\"NF\\\":\\\"string\\\",\\\"MK\\\":\\\"string\\\",\\\"MP\\\":\\\"string\\\",\\\"NO\\\":\\\"string\\\",\\\"OM\\\":\\\"string\\\",\\\"PK\\\":\\\"string\\\",\\\"PW\\\":\\\"string\\\",\\\"PS\\\":\\\"string\\\",\\\"PA\\\":\\\"string\\\",\\\"PG\\\":\\\"string\\\",\\\"PY\\\":\\\"string\\\",\\\"PE\\\":\\\"string\\\",\\\"PH\\\":\\\"string\\\",\\\"PN\\\":\\\"string\\\",\\\"PL\\\":\\\"string\\\",\\\"PT\\\":\\\"string\\\",\\\"PR\\\":\\\"string\\\",\\\"QA\\\":\\\"string\\\",\\\"RE\\\":\\\"string\\\",\\\"RO\\\":\\\"string\\\",\\\"RU\\\":\\\"string\\\",\\\"RW\\\":\\\"string\\\",\\\"SH\\\":\\\"string\\\",\\\"KN\\\":\\\"string\\\",\\\"LC\\\":\\\"string\\\",\\\"PM\\\":\\\"string\\\",\\\"VC\\\":\\\"string\\\",\\\"WS\\\":\\\"string\\\",\\\"SM\\\":\\\"string\\\",\\\"ST\\\":\\\"string\\\",\\\"SA\\\":\\\"string\\\",\\\"SN\\\":\\\"string\\\",\\\"SC\\\":\\\"string\\\",\\\"SL\\\":\\\"string\\\",\\\"SG\\\":\\\"string\\\",\\\"SK\\\":\\\"string\\\",\\\"SI\\\":\\\"string\\\",\\\"SB\\\":\\\"string\\\",\\\"SO\\\":\\\"string\\\",\\\"ZA\\\":\\\"string\\\",\\\"GS\\\":\\\"string\\\",\\\"ES\\\":\\\"string\\\",\\\"LK\\\":\\\"string\\\",\\\"SD\\\":\\\"string\\\",\\\"SR\\\":\\\"string\\\",\\\"SJ\\\":\\\"string\\\",\\\"SZ\\\":\\\"string\\\",\\\"SE\\\":\\\"string\\\",\\\"CH\\\":\\\"string\\\",\\\"SY\\\":\\\"string\\\",\\\"TW\\\":\\\"string\\\",\\\"TJ\\\":\\\"string\\\",\\\"TZ\\\":\\\"string\\\",\\\"TH\\\":\\\"string\\\",\\\"TL\\\":\\\"string\\\",\\\"TG\\\":\\\"string\\\",\\\"TK\\\":\\\"string\\\",\\\"TO\\\":\\\"string\\\",\\\"TT\\\":\\\"string\\\",\\\"TN\\\":\\\"string\\\",\\\"TR\\\":\\\"string\\\",\\\"TM\\\":\\\"string\\\",\\\"TC\\\":\\\"string\\\",\\\"TV\\\":\\\"string\\\",\\\"UG\\\":\\\"string\\\",\\\"UA\\\":\\\"string\\\",\\\"AE\\\":\\\"string\\\",\\\"GB\\\":\\\"string\\\",\\\"US\\\":\\\"string\\\",\\\"UM\\\":\\\"string\\\",\\\"UY\\\":\\\"string\\\",\\\"UZ\\\":\\\"string\\\",\\\"VU\\\":\\\"string\\\",\\\"VE\\\":\\\"string\\\",\\\"VN\\\":\\\"string\\\",\\\"VG\\\":\\\"string\\\",\\\"VI\\\":\\\"string\\\",\\\"WF\\\":\\\"string\\\",\\\"EH\\\":\\\"string\\\",\\\"YE\\\":\\\"string\\\",\\\"ZM\\\":\\\"string\\\",\\\"ZW\\\":\\\"string\\\",\\\"AX\\\":\\\"string\\\",\\\"BQ\\\":\\\"string\\\",\\\"CW\\\":\\\"string\\\",\\\"GG\\\":\\\"string\\\",\\\"IM\\\":\\\"string\\\",\\\"JE\\\":\\\"string\\\",\\\"ME\\\":\\\"string\\\",\\\"BL\\\":\\\"string\\\",\\\"MF\\\":\\\"string\\\",\\\"RS\\\":\\\"string\\\",\\\"SX\\\":\\\"string\\\",\\\"SS\\\":\\\"string\\\",\\\"XK\\\":\\\"string\\\"},\\\"doIndex\\\":false}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links/linkId\")\n  .patch(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Update a link for the authenticated workspace. If there's no change, returns it as it is."
      tags:
        - "Links"
      security:
        - token: []
      parameters:
        - in: "path"
          name: "linkId"
          description: "The id of the link to update. You may use either `linkId` (obtained via `/links/info` endpoint) or `externalId` prefixed with `ext_`."
          schema:
            type: "string"
            description: "The id of the link to update. You may use either `linkId` (obtained via `/links/info` endpoint) or `externalId` prefixed with `ext_`."
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "url":
                  type: "string"
                  description: "The destination URL of the short link."
                  example: "https://google.com"
                "domain":
                  type: "string"
                  description: "The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains)."
                "key":
                  type: "string"
                  description: "The short link slug. If not provided, a random 7-character slug will be generated."
                "externalId":
                  type: "string"
                  nullable: true
                  minLength: 1
                  maxLength: 255
                  description: "This is the ID of the link in your database. If set, it can be used to identify the link in the future. Must be prefixed with `ext_` when passed as a query parameter."
                  example: "123456"
                "prefix":
                  type: "string"
                  description: "The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided."
                "trackConversion":
                  type: "boolean"
                  default: false
                  description: "Whether to track conversions for the short link."
                "archived":
                  type: "boolean"
                  default: false
                  description: "Whether the short link is archived."
                "publicStats":
                  type: "boolean"
                  default: false
                  description: "Whether the short link's stats are publicly accessible."
                "tagId":
                  type: "string"
                  nullable: true
                  description: "The unique ID of the tag assigned to the short link. This field is deprecated – use `tagIds` instead."
                  deprecated: true
                "tagIds":
                  anyOf:
                    - type: "string"
                    - type: "array"
                      items:
                        type: "string"
                  description: "The unique IDs of the tags assigned to the short link."
                  example: ["clux0rgak00011..."]
                "tagNames":
                  anyOf:
                    - type: "string"
                    - type: "array"
                      items:
                        type: "string"
                  description: "The unique name of the tags assigned to the short link (case insensitive)."
                "comments":
                  type: "string"
                  nullable: true
                  description: "The comments for the short link."
                "expiresAt":
                  type: "string"
                  nullable: true
                  description: "The date and time when the short link will expire at."
                "expiredUrl":
                  type: "string"
                  nullable: true
                  description: "The URL to redirect to when the short link has expired."
                "password":
                  type: "string"
                  nullable: true
                  description: "The password required to access the destination URL of the short link."
                "proxy":
                  type: "boolean"
                  default: false
                  description: "Whether the short link uses Custom Social Media Cards feature."
                "title":
                  type: "string"
                  nullable: true
                  description: "The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "description":
                  type: "string"
                  nullable: true
                  description: "The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "image":
                  type: "string"
                  nullable: true
                  description: "The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "video":
                  type: "string"
                  nullable: true
                  description: "The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "rewrite":
                  type: "boolean"
                  default: false
                  description: "Whether the short link uses link cloaking."
                "ios":
                  type: "string"
                  nullable: true
                  description: "The iOS destination URL for the short link for iOS device targeting."
                "android":
                  type: "string"
                  nullable: true
                  description: "The Android destination URL for the short link for Android device targeting."
                "geo":
                  allOf:
                    - {"$ref": "#/components/schemas/linkGeoTargeting"}
                    - description: "Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`."
                "doIndex":
                  type: "boolean"
                  default: false
                  description: "Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex"
      responses:
        "200":
          description: "The updated link"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
    delete:
      operationId: "deleteLink"
      x-speakeasy-name-override: "delete"
      x-speakeasy-max-method-params: 1
      summary: "Delete a link"
      x-codeSamples: [{"lang": "typescript", "label": "deleteLink", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.delete(\"<value>\");\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "deleteLink", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var linkID string = \"<value>\"\n    ctx := context.Background()\n    res, err := s.Links.Delete(ctx, linkID)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "deleteLink", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.links.delete(link_id=\"<value>\")\n\nif ! res.object.nil?\n  # handle response\nend"}, {"lang": "php", "label": "deleteLink", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n    \n\n    $response = $sdk->links->delete('<value>');\n\n    if ($response->object !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: deleteLink, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.delete(link_id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links/linkId\")\n  .delete(null)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Delete a link for the authenticated workspace."
      tags:
        - "Links"
      security:
        - token: []
      parameters:
        - in: "path"
          name: "linkId"
          description: "The id of the link to delete. You may use either `linkId` (obtained via `/links/info` endpoint) or `externalId` prefixed with `ext_`."
          schema:
            type: "string"
            description: "The id of the link to delete. You may use either `linkId` (obtained via `/links/info` endpoint) or `externalId` prefixed with `ext_`."
          required: true
      responses:
        "200":
          description: "The deleted link"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "id":
                    type: "string"
                    description: "The ID of the link."
                required:
                  - "id"
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/links/bulk":
    post:
      operationId: "bulkCreateLinks"
      x-speakeasy-name-override: "createMany"
      summary: "Bulk create links"
      x-codeSamples: [{"lang": "typescript", "label": "bulkCreateLinks", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.createMany([\n    {\n      url: \"https://google.com\",\n    },\n  ]);\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "bulkCreateLinks", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request []operations.RequestBody = []operations.RequestBody{\n        operations.RequestBody{\n            URL: \"https://google.com\",\n            ExternalID: dubgo.String(\"123456\"),\n            TagIds: operations.CreateBulkCreateLinksTagIdsArrayOfStr(\n                    []string{\n                        \"clux0rgak00011...\",\n                    },\n            ),\n        },\n    }\n    ctx := context.Background()\n    res, err := s.Links.CreateMany(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "bulkCreateLinks", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = [\n  ::OpenApiSDK::Operations::RequestBody.new(\n    url: \"https://google.com\",\n    external_id: \"123456\",\n    tag_ids: [\n    \"<value>\",\n  ],\n  ),\n]\n    \nres = s.links.create_many(req)\n\nif ! res.link_schemas.nil?\n  # handle response\nend"}, {"lang": "php", "label": "bulkCreateLinks", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = [\n        new Operations\\RequestBody(),\n    ];\n\n    $response = $sdk->links->createMany($request);\n\n    if ($response->linkSchemas !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: bulkCreateLinks, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.create_many(request=[\n    {\n        \"url\": \"https://google.com\",\n        \"external_id\": \"123456\",\n        \"tag_ids\": [\n            \"clux0rgak00011...\",\n        ],\n    },\n])\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"[{\\\"url\\\":\\\"https://google.com\\\",\\\"domain\\\":\\\"string\\\",\\\"key\\\":\\\"string\\\",\\\"externalId\\\":\\\"123456\\\",\\\"prefix\\\":\\\"string\\\",\\\"trackConversion\\\":false,\\\"archived\\\":false,\\\"publicStats\\\":false,\\\"tagIds\\\":\\\"string\\\",\\\"tagNames\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"expiredUrl\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"proxy\\\":false,\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"image\\\":\\\"string\\\",\\\"video\\\":\\\"string\\\",\\\"rewrite\\\":false,\\\"ios\\\":\\\"string\\\",\\\"android\\\":\\\"string\\\",\\\"geo\\\":{\\\"AF\\\":\\\"string\\\",\\\"AL\\\":\\\"string\\\",\\\"DZ\\\":\\\"string\\\",\\\"AS\\\":\\\"string\\\",\\\"AD\\\":\\\"string\\\",\\\"AO\\\":\\\"string\\\",\\\"AI\\\":\\\"string\\\",\\\"AQ\\\":\\\"string\\\",\\\"AG\\\":\\\"string\\\",\\\"AR\\\":\\\"string\\\",\\\"AM\\\":\\\"string\\\",\\\"AW\\\":\\\"string\\\",\\\"AU\\\":\\\"string\\\",\\\"AT\\\":\\\"string\\\",\\\"AZ\\\":\\\"string\\\",\\\"BS\\\":\\\"string\\\",\\\"BH\\\":\\\"string\\\",\\\"BD\\\":\\\"string\\\",\\\"BB\\\":\\\"string\\\",\\\"BY\\\":\\\"string\\\",\\\"BE\\\":\\\"string\\\",\\\"BZ\\\":\\\"string\\\",\\\"BJ\\\":\\\"string\\\",\\\"BM\\\":\\\"string\\\",\\\"BT\\\":\\\"string\\\",\\\"BO\\\":\\\"string\\\",\\\"BA\\\":\\\"string\\\",\\\"BW\\\":\\\"string\\\",\\\"BV\\\":\\\"string\\\",\\\"BR\\\":\\\"string\\\",\\\"IO\\\":\\\"string\\\",\\\"BN\\\":\\\"string\\\",\\\"BG\\\":\\\"string\\\",\\\"BF\\\":\\\"string\\\",\\\"BI\\\":\\\"string\\\",\\\"KH\\\":\\\"string\\\",\\\"CM\\\":\\\"string\\\",\\\"CA\\\":\\\"string\\\",\\\"CV\\\":\\\"string\\\",\\\"KY\\\":\\\"string\\\",\\\"CF\\\":\\\"string\\\",\\\"TD\\\":\\\"string\\\",\\\"CL\\\":\\\"string\\\",\\\"CN\\\":\\\"string\\\",\\\"CX\\\":\\\"string\\\",\\\"CC\\\":\\\"string\\\",\\\"CO\\\":\\\"string\\\",\\\"KM\\\":\\\"string\\\",\\\"CG\\\":\\\"string\\\",\\\"CD\\\":\\\"string\\\",\\\"CK\\\":\\\"string\\\",\\\"CR\\\":\\\"string\\\",\\\"CI\\\":\\\"string\\\",\\\"HR\\\":\\\"string\\\",\\\"CU\\\":\\\"string\\\",\\\"CY\\\":\\\"string\\\",\\\"CZ\\\":\\\"string\\\",\\\"DK\\\":\\\"string\\\",\\\"DJ\\\":\\\"string\\\",\\\"DM\\\":\\\"string\\\",\\\"DO\\\":\\\"string\\\",\\\"EC\\\":\\\"string\\\",\\\"EG\\\":\\\"string\\\",\\\"SV\\\":\\\"string\\\",\\\"GQ\\\":\\\"string\\\",\\\"ER\\\":\\\"string\\\",\\\"EE\\\":\\\"string\\\",\\\"ET\\\":\\\"string\\\",\\\"FK\\\":\\\"string\\\",\\\"FO\\\":\\\"string\\\",\\\"FJ\\\":\\\"string\\\",\\\"FI\\\":\\\"string\\\",\\\"FR\\\":\\\"string\\\",\\\"GF\\\":\\\"string\\\",\\\"PF\\\":\\\"string\\\",\\\"TF\\\":\\\"string\\\",\\\"GA\\\":\\\"string\\\",\\\"GM\\\":\\\"string\\\",\\\"GE\\\":\\\"string\\\",\\\"DE\\\":\\\"string\\\",\\\"GH\\\":\\\"string\\\",\\\"GI\\\":\\\"string\\\",\\\"GR\\\":\\\"string\\\",\\\"GL\\\":\\\"string\\\",\\\"GD\\\":\\\"string\\\",\\\"GP\\\":\\\"string\\\",\\\"GU\\\":\\\"string\\\",\\\"GT\\\":\\\"string\\\",\\\"GN\\\":\\\"string\\\",\\\"GW\\\":\\\"string\\\",\\\"GY\\\":\\\"string\\\",\\\"HT\\\":\\\"string\\\",\\\"HM\\\":\\\"string\\\",\\\"VA\\\":\\\"string\\\",\\\"HN\\\":\\\"string\\\",\\\"HK\\\":\\\"string\\\",\\\"HU\\\":\\\"string\\\",\\\"IS\\\":\\\"string\\\",\\\"IN\\\":\\\"string\\\",\\\"ID\\\":\\\"string\\\",\\\"IR\\\":\\\"string\\\",\\\"IQ\\\":\\\"string\\\",\\\"IE\\\":\\\"string\\\",\\\"IL\\\":\\\"string\\\",\\\"IT\\\":\\\"string\\\",\\\"JM\\\":\\\"string\\\",\\\"JP\\\":\\\"string\\\",\\\"JO\\\":\\\"string\\\",\\\"KZ\\\":\\\"string\\\",\\\"KE\\\":\\\"string\\\",\\\"KI\\\":\\\"string\\\",\\\"KP\\\":\\\"string\\\",\\\"KR\\\":\\\"string\\\",\\\"KW\\\":\\\"string\\\",\\\"KG\\\":\\\"string\\\",\\\"LA\\\":\\\"string\\\",\\\"LV\\\":\\\"string\\\",\\\"LB\\\":\\\"string\\\",\\\"LS\\\":\\\"string\\\",\\\"LR\\\":\\\"string\\\",\\\"LY\\\":\\\"string\\\",\\\"LI\\\":\\\"string\\\",\\\"LT\\\":\\\"string\\\",\\\"LU\\\":\\\"string\\\",\\\"MO\\\":\\\"string\\\",\\\"MG\\\":\\\"string\\\",\\\"MW\\\":\\\"string\\\",\\\"MY\\\":\\\"string\\\",\\\"MV\\\":\\\"string\\\",\\\"ML\\\":\\\"string\\\",\\\"MT\\\":\\\"string\\\",\\\"MH\\\":\\\"string\\\",\\\"MQ\\\":\\\"string\\\",\\\"MR\\\":\\\"string\\\",\\\"MU\\\":\\\"string\\\",\\\"YT\\\":\\\"string\\\",\\\"MX\\\":\\\"string\\\",\\\"FM\\\":\\\"string\\\",\\\"MD\\\":\\\"string\\\",\\\"MC\\\":\\\"string\\\",\\\"MN\\\":\\\"string\\\",\\\"MS\\\":\\\"string\\\",\\\"MA\\\":\\\"string\\\",\\\"MZ\\\":\\\"string\\\",\\\"MM\\\":\\\"string\\\",\\\"NA\\\":\\\"string\\\",\\\"NR\\\":\\\"string\\\",\\\"NP\\\":\\\"string\\\",\\\"NL\\\":\\\"string\\\",\\\"NC\\\":\\\"string\\\",\\\"NZ\\\":\\\"string\\\",\\\"NI\\\":\\\"string\\\",\\\"NE\\\":\\\"string\\\",\\\"NG\\\":\\\"string\\\",\\\"NU\\\":\\\"string\\\",\\\"NF\\\":\\\"string\\\",\\\"MK\\\":\\\"string\\\",\\\"MP\\\":\\\"string\\\",\\\"NO\\\":\\\"string\\\",\\\"OM\\\":\\\"string\\\",\\\"PK\\\":\\\"string\\\",\\\"PW\\\":\\\"string\\\",\\\"PS\\\":\\\"string\\\",\\\"PA\\\":\\\"string\\\",\\\"PG\\\":\\\"string\\\",\\\"PY\\\":\\\"string\\\",\\\"PE\\\":\\\"string\\\",\\\"PH\\\":\\\"string\\\",\\\"PN\\\":\\\"string\\\",\\\"PL\\\":\\\"string\\\",\\\"PT\\\":\\\"string\\\",\\\"PR\\\":\\\"string\\\",\\\"QA\\\":\\\"string\\\",\\\"RE\\\":\\\"string\\\",\\\"RO\\\":\\\"string\\\",\\\"RU\\\":\\\"string\\\",\\\"RW\\\":\\\"string\\\",\\\"SH\\\":\\\"string\\\",\\\"KN\\\":\\\"string\\\",\\\"LC\\\":\\\"string\\\",\\\"PM\\\":\\\"string\\\",\\\"VC\\\":\\\"string\\\",\\\"WS\\\":\\\"string\\\",\\\"SM\\\":\\\"string\\\",\\\"ST\\\":\\\"string\\\",\\\"SA\\\":\\\"string\\\",\\\"SN\\\":\\\"string\\\",\\\"SC\\\":\\\"string\\\",\\\"SL\\\":\\\"string\\\",\\\"SG\\\":\\\"string\\\",\\\"SK\\\":\\\"string\\\",\\\"SI\\\":\\\"string\\\",\\\"SB\\\":\\\"string\\\",\\\"SO\\\":\\\"string\\\",\\\"ZA\\\":\\\"string\\\",\\\"GS\\\":\\\"string\\\",\\\"ES\\\":\\\"string\\\",\\\"LK\\\":\\\"string\\\",\\\"SD\\\":\\\"string\\\",\\\"SR\\\":\\\"string\\\",\\\"SJ\\\":\\\"string\\\",\\\"SZ\\\":\\\"string\\\",\\\"SE\\\":\\\"string\\\",\\\"CH\\\":\\\"string\\\",\\\"SY\\\":\\\"string\\\",\\\"TW\\\":\\\"string\\\",\\\"TJ\\\":\\\"string\\\",\\\"TZ\\\":\\\"string\\\",\\\"TH\\\":\\\"string\\\",\\\"TL\\\":\\\"string\\\",\\\"TG\\\":\\\"string\\\",\\\"TK\\\":\\\"string\\\",\\\"TO\\\":\\\"string\\\",\\\"TT\\\":\\\"string\\\",\\\"TN\\\":\\\"string\\\",\\\"TR\\\":\\\"string\\\",\\\"TM\\\":\\\"string\\\",\\\"TC\\\":\\\"string\\\",\\\"TV\\\":\\\"string\\\",\\\"UG\\\":\\\"string\\\",\\\"UA\\\":\\\"string\\\",\\\"AE\\\":\\\"string\\\",\\\"GB\\\":\\\"string\\\",\\\"US\\\":\\\"string\\\",\\\"UM\\\":\\\"string\\\",\\\"UY\\\":\\\"string\\\",\\\"UZ\\\":\\\"string\\\",\\\"VU\\\":\\\"string\\\",\\\"VE\\\":\\\"string\\\",\\\"VN\\\":\\\"string\\\",\\\"VG\\\":\\\"string\\\",\\\"VI\\\":\\\"string\\\",\\\"WF\\\":\\\"string\\\",\\\"EH\\\":\\\"string\\\",\\\"YE\\\":\\\"string\\\",\\\"ZM\\\":\\\"string\\\",\\\"ZW\\\":\\\"string\\\",\\\"AX\\\":\\\"string\\\",\\\"BQ\\\":\\\"string\\\",\\\"CW\\\":\\\"string\\\",\\\"GG\\\":\\\"string\\\",\\\"IM\\\":\\\"string\\\",\\\"JE\\\":\\\"string\\\",\\\"ME\\\":\\\"string\\\",\\\"BL\\\":\\\"string\\\",\\\"MF\\\":\\\"string\\\",\\\"RS\\\":\\\"string\\\",\\\"SX\\\":\\\"string\\\",\\\"SS\\\":\\\"string\\\",\\\"XK\\\":\\\"string\\\"},\\\"doIndex\\\":false}]\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links/bulk\")\n  .post(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Bulk create up to 100 links for the authenticated workspace."
      tags:
        - "Links"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "array"
              items:
                type: "object"
                properties:
                  "url":
                    type: "string"
                    description: "The destination URL of the short link."
                    example: "https://google.com"
                  "domain":
                    type: "string"
                    description: "The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains)."
                  "key":
                    type: "string"
                    description: "The short link slug. If not provided, a random 7-character slug will be generated."
                  "externalId":
                    type: "string"
                    nullable: true
                    minLength: 1
                    maxLength: 255
                    description: "This is the ID of the link in your database. If set, it can be used to identify the link in the future. Must be prefixed with `ext_` when passed as a query parameter."
                    example: "123456"
                  "prefix":
                    type: "string"
                    description: "The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided."
                  "trackConversion":
                    type: "boolean"
                    default: false
                    description: "Whether to track conversions for the short link."
                  "archived":
                    type: "boolean"
                    default: false
                    description: "Whether the short link is archived."
                  "publicStats":
                    type: "boolean"
                    default: false
                    description: "Whether the short link's stats are publicly accessible."
                  "tagId":
                    type: "string"
                    nullable: true
                    description: "The unique ID of the tag assigned to the short link. This field is deprecated – use `tagIds` instead."
                    deprecated: true
                  "tagIds":
                    anyOf:
                      - type: "string"
                      - type: "array"
                        items:
                          type: "string"
                    description: "The unique IDs of the tags assigned to the short link."
                    example: ["clux0rgak00011..."]
                  "tagNames":
                    anyOf:
                      - type: "string"
                      - type: "array"
                        items:
                          type: "string"
                    description: "The unique name of the tags assigned to the short link (case insensitive)."
                  "comments":
                    type: "string"
                    nullable: true
                    description: "The comments for the short link."
                  "expiresAt":
                    type: "string"
                    nullable: true
                    description: "The date and time when the short link will expire at."
                  "expiredUrl":
                    type: "string"
                    nullable: true
                    description: "The URL to redirect to when the short link has expired."
                  "password":
                    type: "string"
                    nullable: true
                    description: "The password required to access the destination URL of the short link."
                  "proxy":
                    type: "boolean"
                    default: false
                    description: "Whether the short link uses Custom Social Media Cards feature."
                  "title":
                    type: "string"
                    nullable: true
                    description: "The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                  "description":
                    type: "string"
                    nullable: true
                    description: "The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                  "image":
                    type: "string"
                    nullable: true
                    description: "The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                  "video":
                    type: "string"
                    nullable: true
                    description: "The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                  "rewrite":
                    type: "boolean"
                    default: false
                    description: "Whether the short link uses link cloaking."
                  "ios":
                    type: "string"
                    nullable: true
                    description: "The iOS destination URL for the short link for iOS device targeting."
                  "android":
                    type: "string"
                    nullable: true
                    description: "The Android destination URL for the short link for Android device targeting."
                  "geo": {"$ref": "#/components/schemas/linkGeoTargeting"}
                  "doIndex":
                    type: "boolean"
                    default: false
                    description: "Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex"
                required:
                  - "url"
      responses:
        "200":
          description: "The created links"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/LinkSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
    patch:
      operationId: "bulkUpdateLinks"
      x-speakeasy-name-override: "updateMany"
      summary: "Bulk update links"
      x-codeSamples: [{"lang": "typescript", "label": "bulkUpdateLinks", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.updateMany({\n    linkIds: [\n      \"<value>\",\n    ],\n    data: {},\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "bulkUpdateLinks", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.BulkUpdateLinksRequestBody = &operations.BulkUpdateLinksRequestBody{\n        LinkIds: []string{\n            \"<value>\",\n        },\n        Data: operations.Data{\n            URL: dubgo.String(\"https://google.com\"),\n            TagIds: operations.CreateBulkUpdateLinksTagIdsArrayOfStr(\n                    []string{\n                        \"clux0rgak00011...\",\n                    },\n            ),\n        },\n    }\n    ctx := context.Background()\n    res, err := s.Links.UpdateMany(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "bulkUpdateLinks", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::BulkUpdateLinksRequestBody.new(\n  link_ids: [\n    \"<value>\",\n  ],\n  data: ::OpenApiSDK::Operations::Data.new(\n    url: \"https://google.com\",\n    tag_ids: [\n    \"<value>\",\n  ],\n  ),\n)\n    \nres = s.links.update_many(req)\n\nif ! res.link_schemas.nil?\n  # handle response\nend"}, {"lang": "php", "label": "bulkUpdateLinks", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\BulkUpdateLinksRequestBody();\n    $request->linkIds = [\n        '<value>',\n    ];\n    $request->data = new Operations\\Data();\n    $request->data->url = 'https://google.com';\n    $request->data->trackConversion = false;\n    $request->data->archived = false;\n    $request->data->publicStats = false;\n    $request->data->tagId = '<value>';\n    $request->data->tagIds = [\n        '<value>',\n    ];\n    $request->data->tagNames = '<value>';\n    $request->data->comments = '<value>';\n    $request->data->expiresAt = '<value>';\n    $request->data->expiredUrl = '<value>';\n    $request->data->password = 'GWDSvXDvs2q1hzW';\n    $request->data->proxy = false;\n    $request->data->title = '<value>';\n    $request->data->description = 'Upgradable cohesive implementation';\n    $request->data->image = 'https://loremflickr.com/640/480';\n    $request->data->video = '<value>';\n    $request->data->rewrite = false;\n    $request->data->ios = '<value>';\n    $request->data->android = '<value>';\n    $request->data->geo = new Components\\LinkGeoTargeting();\n    $request->data->geo->af = '<value>';\n    $request->data->geo->al = '<value>';\n    $request->data->geo->dz = '<value>';\n    $request->data->geo->as = '<value>';\n    $request->data->geo->ad = '<value>';\n    $request->data->geo->ao = '<value>';\n    $request->data->geo->ai = '<value>';\n    $request->data->geo->aq = '<value>';\n    $request->data->geo->ag = '<value>';\n    $request->data->geo->ar = '<value>';\n    $request->data->geo->am = '<value>';\n    $request->data->geo->aw = '<value>';\n    $request->data->geo->au = '<value>';\n    $request->data->geo->at = '<value>';\n    $request->data->geo->az = '<value>';\n    $request->data->geo->bs = '<value>';\n    $request->data->geo->bh = '<value>';\n    $request->data->geo->bd = '<value>';\n    $request->data->geo->bb = '<value>';\n    $request->data->geo->by = '<value>';\n    $request->data->geo->be = '<value>';\n    $request->data->geo->bz = '<value>';\n    $request->data->geo->bj = '<value>';\n    $request->data->geo->bm = '<value>';\n    $request->data->geo->bt = '<value>';\n    $request->data->geo->bo = '<value>';\n    $request->data->geo->ba = '<value>';\n    $request->data->geo->bw = '<value>';\n    $request->data->geo->bv = '<value>';\n    $request->data->geo->br = '<value>';\n    $request->data->geo->io = '<value>';\n    $request->data->geo->bn = '<value>';\n    $request->data->geo->bg = '<value>';\n    $request->data->geo->bf = '<value>';\n    $request->data->geo->bi = '<value>';\n    $request->data->geo->kh = '<value>';\n    $request->data->geo->cm = '<value>';\n    $request->data->geo->ca = '<value>';\n    $request->data->geo->cv = '<value>';\n    $request->data->geo->ky = '<value>';\n    $request->data->geo->cf = '<value>';\n    $request->data->geo->td = '<value>';\n    $request->data->geo->cl = '<value>';\n    $request->data->geo->cn = '<value>';\n    $request->data->geo->cx = '<value>';\n    $request->data->geo->cc = '<value>';\n    $request->data->geo->co = '<value>';\n    $request->data->geo->km = '<value>';\n    $request->data->geo->cg = '<value>';\n    $request->data->geo->cd = '<value>';\n    $request->data->geo->ck = '<value>';\n    $request->data->geo->cr = '<value>';\n    $request->data->geo->ci = '<value>';\n    $request->data->geo->hr = '<value>';\n    $request->data->geo->cu = '<value>';\n    $request->data->geo->cy = '<value>';\n    $request->data->geo->cz = '<value>';\n    $request->data->geo->dk = '<value>';\n    $request->data->geo->dj = '<value>';\n    $request->data->geo->dm = '<value>';\n    $request->data->geo->do = '<value>';\n    $request->data->geo->ec = '<value>';\n    $request->data->geo->eg = '<value>';\n    $request->data->geo->sv = '<value>';\n    $request->data->geo->gq = '<value>';\n    $request->data->geo->er = '<value>';\n    $request->data->geo->ee = '<value>';\n    $request->data->geo->et = '<value>';\n    $request->data->geo->fk = '<value>';\n    $request->data->geo->fo = '<value>';\n    $request->data->geo->fj = '<value>';\n    $request->data->geo->fi = '<value>';\n    $request->data->geo->fr = '<value>';\n    $request->data->geo->gf = '<value>';\n    $request->data->geo->pf = '<value>';\n    $request->data->geo->tf = '<value>';\n    $request->data->geo->ga = '<value>';\n    $request->data->geo->gm = '<value>';\n    $request->data->geo->ge = '<value>';\n    $request->data->geo->de = '<value>';\n    $request->data->geo->gh = '<value>';\n    $request->data->geo->gi = '<value>';\n    $request->data->geo->gr = '<value>';\n    $request->data->geo->gl = '<value>';\n    $request->data->geo->gd = '<value>';\n    $request->data->geo->gp = '<value>';\n    $request->data->geo->gu = '<value>';\n    $request->data->geo->gt = '<value>';\n    $request->data->geo->gn = '<value>';\n    $request->data->geo->gw = '<value>';\n    $request->data->geo->gy = '<value>';\n    $request->data->geo->ht = '<value>';\n    $request->data->geo->hm = '<value>';\n    $request->data->geo->va = '<value>';\n    $request->data->geo->hn = '<value>';\n    $request->data->geo->hk = '<value>';\n    $request->data->geo->hu = '<value>';\n    $request->data->geo->is = '<value>';\n    $request->data->geo->in = '<value>';\n    $request->data->geo->id = '<id>';\n    $request->data->geo->ir = '<value>';\n    $request->data->geo->iq = '<value>';\n    $request->data->geo->ie = '<value>';\n    $request->data->geo->il = '<value>';\n    $request->data->geo->it = '<value>';\n    $request->data->geo->jm = '<value>';\n    $request->data->geo->jp = '<value>';\n    $request->data->geo->jo = '<value>';\n    $request->data->geo->kz = '<value>';\n    $request->data->geo->ke = '<value>';\n    $request->data->geo->ki = '<value>';\n    $request->data->geo->kp = '<value>';\n    $request->data->geo->kr = '<value>';\n    $request->data->geo->kw = '<value>';\n    $request->data->geo->kg = '<value>';\n    $request->data->geo->la = '<value>';\n    $request->data->geo->lv = '<value>';\n    $request->data->geo->lb = '<value>';\n    $request->data->geo->ls = '<value>';\n    $request->data->geo->lr = '<value>';\n    $request->data->geo->ly = '<value>';\n    $request->data->geo->li = '<value>';\n    $request->data->geo->lt = '<value>';\n    $request->data->geo->lu = '<value>';\n    $request->data->geo->mo = '<value>';\n    $request->data->geo->mg = '<value>';\n    $request->data->geo->mw = '<value>';\n    $request->data->geo->my = '<value>';\n    $request->data->geo->mv = '<value>';\n    $request->data->geo->ml = '<value>';\n    $request->data->geo->mt = '<value>';\n    $request->data->geo->mh = '<value>';\n    $request->data->geo->mq = '<value>';\n    $request->data->geo->mr = '<value>';\n    $request->data->geo->mu = '<value>';\n    $request->data->geo->yt = '<value>';\n    $request->data->geo->mx = '<value>';\n    $request->data->geo->fm = '<value>';\n    $request->data->geo->md = '<value>';\n    $request->data->geo->mc = '<value>';\n    $request->data->geo->mn = '<value>';\n    $request->data->geo->ms = '<value>';\n    $request->data->geo->ma = '<value>';\n    $request->data->geo->mz = '<value>';\n    $request->data->geo->mm = '<value>';\n    $request->data->geo->na = '<value>';\n    $request->data->geo->nr = '<value>';\n    $request->data->geo->np = '<value>';\n    $request->data->geo->nl = '<value>';\n    $request->data->geo->nc = '<value>';\n    $request->data->geo->nz = '<value>';\n    $request->data->geo->ni = '<value>';\n    $request->data->geo->ne = '<value>';\n    $request->data->geo->ng = '<value>';\n    $request->data->geo->nu = '<value>';\n    $request->data->geo->nf = '<value>';\n    $request->data->geo->mk = '<value>';\n    $request->data->geo->mp = '<value>';\n    $request->data->geo->no = '<value>';\n    $request->data->geo->om = '<value>';\n    $request->data->geo->pk = '<value>';\n    $request->data->geo->pw = '<value>';\n    $request->data->geo->ps = '<value>';\n    $request->data->geo->pa = '<value>';\n    $request->data->geo->pg = '<value>';\n    $request->data->geo->py = '<value>';\n    $request->data->geo->pe = '<value>';\n    $request->data->geo->ph = '<value>';\n    $request->data->geo->pn = '<value>';\n    $request->data->geo->pl = '<value>';\n    $request->data->geo->pt = '<value>';\n    $request->data->geo->pr = '<value>';\n    $request->data->geo->qa = '<value>';\n    $request->data->geo->re = '<value>';\n    $request->data->geo->ro = '<value>';\n    $request->data->geo->ru = '<value>';\n    $request->data->geo->rw = '<value>';\n    $request->data->geo->sh = '<value>';\n    $request->data->geo->kn = '<value>';\n    $request->data->geo->lc = '<value>';\n    $request->data->geo->pm = '<value>';\n    $request->data->geo->vc = '<value>';\n    $request->data->geo->ws = '<value>';\n    $request->data->geo->sm = '<value>';\n    $request->data->geo->st = '<value>';\n    $request->data->geo->sa = '<value>';\n    $request->data->geo->sn = '<value>';\n    $request->data->geo->sc = '<value>';\n    $request->data->geo->sl = '<value>';\n    $request->data->geo->sg = '<value>';\n    $request->data->geo->sk = '<value>';\n    $request->data->geo->si = '<value>';\n    $request->data->geo->sb = '<value>';\n    $request->data->geo->so = '<value>';\n    $request->data->geo->za = '<value>';\n    $request->data->geo->gs = '<value>';\n    $request->data->geo->es = '<value>';\n    $request->data->geo->lk = '<value>';\n    $request->data->geo->sd = '<value>';\n    $request->data->geo->sr = '<value>';\n    $request->data->geo->sj = '<value>';\n    $request->data->geo->sz = '<value>';\n    $request->data->geo->se = '<value>';\n    $request->data->geo->ch = '<value>';\n    $request->data->geo->sy = '<value>';\n    $request->data->geo->tw = '<value>';\n    $request->data->geo->tj = '<value>';\n    $request->data->geo->tz = '<value>';\n    $request->data->geo->th = '<value>';\n    $request->data->geo->tl = '<value>';\n    $request->data->geo->tg = '<value>';\n    $request->data->geo->tk = '<value>';\n    $request->data->geo->to = '<value>';\n    $request->data->geo->tt = '<value>';\n    $request->data->geo->tn = '<value>';\n    $request->data->geo->tr = '<value>';\n    $request->data->geo->tm = '<value>';\n    $request->data->geo->tc = '<value>';\n    $request->data->geo->tv = '<value>';\n    $request->data->geo->ug = '<value>';\n    $request->data->geo->ua = '<value>';\n    $request->data->geo->ae = '<value>';\n    $request->data->geo->gb = '<value>';\n    $request->data->geo->us = '<value>';\n    $request->data->geo->um = '<value>';\n    $request->data->geo->uy = '<value>';\n    $request->data->geo->uz = '<value>';\n    $request->data->geo->vu = '<value>';\n    $request->data->geo->ve = '<value>';\n    $request->data->geo->vn = '<value>';\n    $request->data->geo->vg = '<value>';\n    $request->data->geo->vi = '<value>';\n    $request->data->geo->wf = '<value>';\n    $request->data->geo->eh = '<value>';\n    $request->data->geo->ye = '<value>';\n    $request->data->geo->zm = '<value>';\n    $request->data->geo->zw = '<value>';\n    $request->data->geo->ax = '<value>';\n    $request->data->geo->bq = '<value>';\n    $request->data->geo->cw = '<value>';\n    $request->data->geo->gg = '<value>';\n    $request->data->geo->im = '<value>';\n    $request->data->geo->je = '<value>';\n    $request->data->geo->me = '<value>';\n    $request->data->geo->bl = '<value>';\n    $request->data->geo->mf = '<value>';\n    $request->data->geo->rs = '<value>';\n    $request->data->geo->sx = '<value>';\n    $request->data->geo->ss = '<value>';\n    $request->data->geo->xk = '<value>';\n    $request->data->doIndex = false;;\n\n    $response = $sdk->links->updateMany($request);\n\n    if ($response->linkSchemas !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: bulkUpdateLinks, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.update_many(request={\n    \"link_ids\": [\n        \"<value>\",\n    ],\n    \"data\": {\n        \"url\": \"https://google.com\",\n        \"tag_ids\": [\n            \"clux0rgak00011...\",\n        ],\n    },\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"linkIds\\\":[\\\"string\\\"],\\\"data\\\":{\\\"url\\\":\\\"https://google.com\\\",\\\"trackConversion\\\":false,\\\"archived\\\":false,\\\"publicStats\\\":false,\\\"tagIds\\\":\\\"string\\\",\\\"tagNames\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"expiredUrl\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"proxy\\\":false,\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"image\\\":\\\"string\\\",\\\"video\\\":\\\"string\\\",\\\"rewrite\\\":false,\\\"ios\\\":\\\"string\\\",\\\"android\\\":\\\"string\\\",\\\"geo\\\":{\\\"AF\\\":\\\"string\\\",\\\"AL\\\":\\\"string\\\",\\\"DZ\\\":\\\"string\\\",\\\"AS\\\":\\\"string\\\",\\\"AD\\\":\\\"string\\\",\\\"AO\\\":\\\"string\\\",\\\"AI\\\":\\\"string\\\",\\\"AQ\\\":\\\"string\\\",\\\"AG\\\":\\\"string\\\",\\\"AR\\\":\\\"string\\\",\\\"AM\\\":\\\"string\\\",\\\"AW\\\":\\\"string\\\",\\\"AU\\\":\\\"string\\\",\\\"AT\\\":\\\"string\\\",\\\"AZ\\\":\\\"string\\\",\\\"BS\\\":\\\"string\\\",\\\"BH\\\":\\\"string\\\",\\\"BD\\\":\\\"string\\\",\\\"BB\\\":\\\"string\\\",\\\"BY\\\":\\\"string\\\",\\\"BE\\\":\\\"string\\\",\\\"BZ\\\":\\\"string\\\",\\\"BJ\\\":\\\"string\\\",\\\"BM\\\":\\\"string\\\",\\\"BT\\\":\\\"string\\\",\\\"BO\\\":\\\"string\\\",\\\"BA\\\":\\\"string\\\",\\\"BW\\\":\\\"string\\\",\\\"BV\\\":\\\"string\\\",\\\"BR\\\":\\\"string\\\",\\\"IO\\\":\\\"string\\\",\\\"BN\\\":\\\"string\\\",\\\"BG\\\":\\\"string\\\",\\\"BF\\\":\\\"string\\\",\\\"BI\\\":\\\"string\\\",\\\"KH\\\":\\\"string\\\",\\\"CM\\\":\\\"string\\\",\\\"CA\\\":\\\"string\\\",\\\"CV\\\":\\\"string\\\",\\\"KY\\\":\\\"string\\\",\\\"CF\\\":\\\"string\\\",\\\"TD\\\":\\\"string\\\",\\\"CL\\\":\\\"string\\\",\\\"CN\\\":\\\"string\\\",\\\"CX\\\":\\\"string\\\",\\\"CC\\\":\\\"string\\\",\\\"CO\\\":\\\"string\\\",\\\"KM\\\":\\\"string\\\",\\\"CG\\\":\\\"string\\\",\\\"CD\\\":\\\"string\\\",\\\"CK\\\":\\\"string\\\",\\\"CR\\\":\\\"string\\\",\\\"CI\\\":\\\"string\\\",\\\"HR\\\":\\\"string\\\",\\\"CU\\\":\\\"string\\\",\\\"CY\\\":\\\"string\\\",\\\"CZ\\\":\\\"string\\\",\\\"DK\\\":\\\"string\\\",\\\"DJ\\\":\\\"string\\\",\\\"DM\\\":\\\"string\\\",\\\"DO\\\":\\\"string\\\",\\\"EC\\\":\\\"string\\\",\\\"EG\\\":\\\"string\\\",\\\"SV\\\":\\\"string\\\",\\\"GQ\\\":\\\"string\\\",\\\"ER\\\":\\\"string\\\",\\\"EE\\\":\\\"string\\\",\\\"ET\\\":\\\"string\\\",\\\"FK\\\":\\\"string\\\",\\\"FO\\\":\\\"string\\\",\\\"FJ\\\":\\\"string\\\",\\\"FI\\\":\\\"string\\\",\\\"FR\\\":\\\"string\\\",\\\"GF\\\":\\\"string\\\",\\\"PF\\\":\\\"string\\\",\\\"TF\\\":\\\"string\\\",\\\"GA\\\":\\\"string\\\",\\\"GM\\\":\\\"string\\\",\\\"GE\\\":\\\"string\\\",\\\"DE\\\":\\\"string\\\",\\\"GH\\\":\\\"string\\\",\\\"GI\\\":\\\"string\\\",\\\"GR\\\":\\\"string\\\",\\\"GL\\\":\\\"string\\\",\\\"GD\\\":\\\"string\\\",\\\"GP\\\":\\\"string\\\",\\\"GU\\\":\\\"string\\\",\\\"GT\\\":\\\"string\\\",\\\"GN\\\":\\\"string\\\",\\\"GW\\\":\\\"string\\\",\\\"GY\\\":\\\"string\\\",\\\"HT\\\":\\\"string\\\",\\\"HM\\\":\\\"string\\\",\\\"VA\\\":\\\"string\\\",\\\"HN\\\":\\\"string\\\",\\\"HK\\\":\\\"string\\\",\\\"HU\\\":\\\"string\\\",\\\"IS\\\":\\\"string\\\",\\\"IN\\\":\\\"string\\\",\\\"ID\\\":\\\"string\\\",\\\"IR\\\":\\\"string\\\",\\\"IQ\\\":\\\"string\\\",\\\"IE\\\":\\\"string\\\",\\\"IL\\\":\\\"string\\\",\\\"IT\\\":\\\"string\\\",\\\"JM\\\":\\\"string\\\",\\\"JP\\\":\\\"string\\\",\\\"JO\\\":\\\"string\\\",\\\"KZ\\\":\\\"string\\\",\\\"KE\\\":\\\"string\\\",\\\"KI\\\":\\\"string\\\",\\\"KP\\\":\\\"string\\\",\\\"KR\\\":\\\"string\\\",\\\"KW\\\":\\\"string\\\",\\\"KG\\\":\\\"string\\\",\\\"LA\\\":\\\"string\\\",\\\"LV\\\":\\\"string\\\",\\\"LB\\\":\\\"string\\\",\\\"LS\\\":\\\"string\\\",\\\"LR\\\":\\\"string\\\",\\\"LY\\\":\\\"string\\\",\\\"LI\\\":\\\"string\\\",\\\"LT\\\":\\\"string\\\",\\\"LU\\\":\\\"string\\\",\\\"MO\\\":\\\"string\\\",\\\"MG\\\":\\\"string\\\",\\\"MW\\\":\\\"string\\\",\\\"MY\\\":\\\"string\\\",\\\"MV\\\":\\\"string\\\",\\\"ML\\\":\\\"string\\\",\\\"MT\\\":\\\"string\\\",\\\"MH\\\":\\\"string\\\",\\\"MQ\\\":\\\"string\\\",\\\"MR\\\":\\\"string\\\",\\\"MU\\\":\\\"string\\\",\\\"YT\\\":\\\"string\\\",\\\"MX\\\":\\\"string\\\",\\\"FM\\\":\\\"string\\\",\\\"MD\\\":\\\"string\\\",\\\"MC\\\":\\\"string\\\",\\\"MN\\\":\\\"string\\\",\\\"MS\\\":\\\"string\\\",\\\"MA\\\":\\\"string\\\",\\\"MZ\\\":\\\"string\\\",\\\"MM\\\":\\\"string\\\",\\\"NA\\\":\\\"string\\\",\\\"NR\\\":\\\"string\\\",\\\"NP\\\":\\\"string\\\",\\\"NL\\\":\\\"string\\\",\\\"NC\\\":\\\"string\\\",\\\"NZ\\\":\\\"string\\\",\\\"NI\\\":\\\"string\\\",\\\"NE\\\":\\\"string\\\",\\\"NG\\\":\\\"string\\\",\\\"NU\\\":\\\"string\\\",\\\"NF\\\":\\\"string\\\",\\\"MK\\\":\\\"string\\\",\\\"MP\\\":\\\"string\\\",\\\"NO\\\":\\\"string\\\",\\\"OM\\\":\\\"string\\\",\\\"PK\\\":\\\"string\\\",\\\"PW\\\":\\\"string\\\",\\\"PS\\\":\\\"string\\\",\\\"PA\\\":\\\"string\\\",\\\"PG\\\":\\\"string\\\",\\\"PY\\\":\\\"string\\\",\\\"PE\\\":\\\"string\\\",\\\"PH\\\":\\\"string\\\",\\\"PN\\\":\\\"string\\\",\\\"PL\\\":\\\"string\\\",\\\"PT\\\":\\\"string\\\",\\\"PR\\\":\\\"string\\\",\\\"QA\\\":\\\"string\\\",\\\"RE\\\":\\\"string\\\",\\\"RO\\\":\\\"string\\\",\\\"RU\\\":\\\"string\\\",\\\"RW\\\":\\\"string\\\",\\\"SH\\\":\\\"string\\\",\\\"KN\\\":\\\"string\\\",\\\"LC\\\":\\\"string\\\",\\\"PM\\\":\\\"string\\\",\\\"VC\\\":\\\"string\\\",\\\"WS\\\":\\\"string\\\",\\\"SM\\\":\\\"string\\\",\\\"ST\\\":\\\"string\\\",\\\"SA\\\":\\\"string\\\",\\\"SN\\\":\\\"string\\\",\\\"SC\\\":\\\"string\\\",\\\"SL\\\":\\\"string\\\",\\\"SG\\\":\\\"string\\\",\\\"SK\\\":\\\"string\\\",\\\"SI\\\":\\\"string\\\",\\\"SB\\\":\\\"string\\\",\\\"SO\\\":\\\"string\\\",\\\"ZA\\\":\\\"string\\\",\\\"GS\\\":\\\"string\\\",\\\"ES\\\":\\\"string\\\",\\\"LK\\\":\\\"string\\\",\\\"SD\\\":\\\"string\\\",\\\"SR\\\":\\\"string\\\",\\\"SJ\\\":\\\"string\\\",\\\"SZ\\\":\\\"string\\\",\\\"SE\\\":\\\"string\\\",\\\"CH\\\":\\\"string\\\",\\\"SY\\\":\\\"string\\\",\\\"TW\\\":\\\"string\\\",\\\"TJ\\\":\\\"string\\\",\\\"TZ\\\":\\\"string\\\",\\\"TH\\\":\\\"string\\\",\\\"TL\\\":\\\"string\\\",\\\"TG\\\":\\\"string\\\",\\\"TK\\\":\\\"string\\\",\\\"TO\\\":\\\"string\\\",\\\"TT\\\":\\\"string\\\",\\\"TN\\\":\\\"string\\\",\\\"TR\\\":\\\"string\\\",\\\"TM\\\":\\\"string\\\",\\\"TC\\\":\\\"string\\\",\\\"TV\\\":\\\"string\\\",\\\"UG\\\":\\\"string\\\",\\\"UA\\\":\\\"string\\\",\\\"AE\\\":\\\"string\\\",\\\"GB\\\":\\\"string\\\",\\\"US\\\":\\\"string\\\",\\\"UM\\\":\\\"string\\\",\\\"UY\\\":\\\"string\\\",\\\"UZ\\\":\\\"string\\\",\\\"VU\\\":\\\"string\\\",\\\"VE\\\":\\\"string\\\",\\\"VN\\\":\\\"string\\\",\\\"VG\\\":\\\"string\\\",\\\"VI\\\":\\\"string\\\",\\\"WF\\\":\\\"string\\\",\\\"EH\\\":\\\"string\\\",\\\"YE\\\":\\\"string\\\",\\\"ZM\\\":\\\"string\\\",\\\"ZW\\\":\\\"string\\\",\\\"AX\\\":\\\"string\\\",\\\"BQ\\\":\\\"string\\\",\\\"CW\\\":\\\"string\\\",\\\"GG\\\":\\\"string\\\",\\\"IM\\\":\\\"string\\\",\\\"JE\\\":\\\"string\\\",\\\"ME\\\":\\\"string\\\",\\\"BL\\\":\\\"string\\\",\\\"MF\\\":\\\"string\\\",\\\"RS\\\":\\\"string\\\",\\\"SX\\\":\\\"string\\\",\\\"SS\\\":\\\"string\\\",\\\"XK\\\":\\\"string\\\"},\\\"doIndex\\\":false}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links/bulk\")\n  .patch(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Bulk update up to 100 links with the same data for the authenticated workspace."
      tags:
        - "Links"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "linkIds":
                  type: "array"
                  items:
                    type: "string"
                  minItems: 1
                  maxItems: 100
                "data":
                  type: "object"
                  properties:
                    "url":
                      type: "string"
                      description: "The destination URL of the short link."
                      example: "https://google.com"
                    "trackConversion":
                      type: "boolean"
                      default: false
                      description: "Whether to track conversions for the short link."
                    "archived":
                      type: "boolean"
                      default: false
                      description: "Whether the short link is archived."
                    "publicStats":
                      type: "boolean"
                      default: false
                      description: "Whether the short link's stats are publicly accessible."
                    "tagId":
                      type: "string"
                      nullable: true
                      description: "The unique ID of the tag assigned to the short link. This field is deprecated – use `tagIds` instead."
                      deprecated: true
                    "tagIds":
                      anyOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                      description: "The unique IDs of the tags assigned to the short link."
                      example: ["clux0rgak00011..."]
                    "tagNames":
                      anyOf:
                        - type: "string"
                        - type: "array"
                          items:
                            type: "string"
                      description: "The unique name of the tags assigned to the short link (case insensitive)."
                    "comments":
                      type: "string"
                      nullable: true
                      description: "The comments for the short link."
                    "expiresAt":
                      type: "string"
                      nullable: true
                      description: "The date and time when the short link will expire at."
                    "expiredUrl":
                      type: "string"
                      nullable: true
                      description: "The URL to redirect to when the short link has expired."
                    "password":
                      type: "string"
                      nullable: true
                      description: "The password required to access the destination URL of the short link."
                    "proxy":
                      type: "boolean"
                      default: false
                      description: "Whether the short link uses Custom Social Media Cards feature."
                    "title":
                      type: "string"
                      nullable: true
                      description: "The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                    "description":
                      type: "string"
                      nullable: true
                      description: "The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                    "image":
                      type: "string"
                      nullable: true
                      description: "The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                    "video":
                      type: "string"
                      nullable: true
                      description: "The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                    "rewrite":
                      type: "boolean"
                      default: false
                      description: "Whether the short link uses link cloaking."
                    "ios":
                      type: "string"
                      nullable: true
                      description: "The iOS destination URL for the short link for iOS device targeting."
                    "android":
                      type: "string"
                      nullable: true
                      description: "The Android destination URL for the short link for Android device targeting."
                    "geo": {"$ref": "#/components/schemas/linkGeoTargeting"}
                    "doIndex":
                      type: "boolean"
                      default: false
                      description: "Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex"
              required:
                - "linkIds"
                - "data"
      responses:
        "200":
          description: "The updated links"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/LinkSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/links/upsert":
    put:
      operationId: "upsertLink"
      x-speakeasy-name-override: "upsert"
      x-speakeasy-usage-example: true
      summary: "Upsert a link"
      x-codeSamples: [{"lang": "typescript", "label": "upsertLink", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.links.upsert({\n    url: \"https://google.com\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "upsertLink", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.UpsertLinkRequestBody = &operations.UpsertLinkRequestBody{\n        URL: \"https://google.com\",\n        ExternalID: dubgo.String(\"123456\"),\n        TagIds: operations.CreateUpsertLinkTagIdsArrayOfStr(\n                []string{\n                    \"clux0rgak00011...\",\n                },\n        ),\n    }\n    ctx := context.Background()\n    res, err := s.Links.Upsert(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "upsertLink", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::UpsertLinkRequestBody.new(\n  url: \"https://google.com\",\n  external_id: \"123456\",\n  tag_ids: [\n  \"<value>\",\n],\n)\n    \nres = s.links.upsert(req)\n\nif ! res.link_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "upsertLink", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\UpsertLinkRequestBody();\n    $request->url = 'https://google.com';\n    $request->domain = 'monthly-hometown.info';\n    $request->key = '<key>';\n    $request->externalId = '123456';\n    $request->prefix = '<value>';\n    $request->trackConversion = false;\n    $request->archived = false;\n    $request->publicStats = false;\n    $request->tagId = '<value>';\n    $request->tagIds = [\n        '<value>',\n    ];\n    $request->tagNames = '<value>';\n    $request->comments = '<value>';\n    $request->expiresAt = '<value>';\n    $request->expiredUrl = '<value>';\n    $request->password = 'SFNg7iwZDcrQrPc';\n    $request->proxy = false;\n    $request->title = '<value>';\n    $request->description = 'Focused full-range forecast';\n    $request->image = 'https://loremflickr.com/640/480';\n    $request->video = '<value>';\n    $request->rewrite = false;\n    $request->ios = '<value>';\n    $request->android = '<value>';\n    $request->geo = new Components\\LinkGeoTargeting();\n    $request->geo->af = '<value>';\n    $request->geo->al = '<value>';\n    $request->geo->dz = '<value>';\n    $request->geo->as = '<value>';\n    $request->geo->ad = '<value>';\n    $request->geo->ao = '<value>';\n    $request->geo->ai = '<value>';\n    $request->geo->aq = '<value>';\n    $request->geo->ag = '<value>';\n    $request->geo->ar = '<value>';\n    $request->geo->am = '<value>';\n    $request->geo->aw = '<value>';\n    $request->geo->au = '<value>';\n    $request->geo->at = '<value>';\n    $request->geo->az = '<value>';\n    $request->geo->bs = '<value>';\n    $request->geo->bh = '<value>';\n    $request->geo->bd = '<value>';\n    $request->geo->bb = '<value>';\n    $request->geo->by = '<value>';\n    $request->geo->be = '<value>';\n    $request->geo->bz = '<value>';\n    $request->geo->bj = '<value>';\n    $request->geo->bm = '<value>';\n    $request->geo->bt = '<value>';\n    $request->geo->bo = '<value>';\n    $request->geo->ba = '<value>';\n    $request->geo->bw = '<value>';\n    $request->geo->bv = '<value>';\n    $request->geo->br = '<value>';\n    $request->geo->io = '<value>';\n    $request->geo->bn = '<value>';\n    $request->geo->bg = '<value>';\n    $request->geo->bf = '<value>';\n    $request->geo->bi = '<value>';\n    $request->geo->kh = '<value>';\n    $request->geo->cm = '<value>';\n    $request->geo->ca = '<value>';\n    $request->geo->cv = '<value>';\n    $request->geo->ky = '<value>';\n    $request->geo->cf = '<value>';\n    $request->geo->td = '<value>';\n    $request->geo->cl = '<value>';\n    $request->geo->cn = '<value>';\n    $request->geo->cx = '<value>';\n    $request->geo->cc = '<value>';\n    $request->geo->co = '<value>';\n    $request->geo->km = '<value>';\n    $request->geo->cg = '<value>';\n    $request->geo->cd = '<value>';\n    $request->geo->ck = '<value>';\n    $request->geo->cr = '<value>';\n    $request->geo->ci = '<value>';\n    $request->geo->hr = '<value>';\n    $request->geo->cu = '<value>';\n    $request->geo->cy = '<value>';\n    $request->geo->cz = '<value>';\n    $request->geo->dk = '<value>';\n    $request->geo->dj = '<value>';\n    $request->geo->dm = '<value>';\n    $request->geo->do = '<value>';\n    $request->geo->ec = '<value>';\n    $request->geo->eg = '<value>';\n    $request->geo->sv = '<value>';\n    $request->geo->gq = '<value>';\n    $request->geo->er = '<value>';\n    $request->geo->ee = '<value>';\n    $request->geo->et = '<value>';\n    $request->geo->fk = '<value>';\n    $request->geo->fo = '<value>';\n    $request->geo->fj = '<value>';\n    $request->geo->fi = '<value>';\n    $request->geo->fr = '<value>';\n    $request->geo->gf = '<value>';\n    $request->geo->pf = '<value>';\n    $request->geo->tf = '<value>';\n    $request->geo->ga = '<value>';\n    $request->geo->gm = '<value>';\n    $request->geo->ge = '<value>';\n    $request->geo->de = '<value>';\n    $request->geo->gh = '<value>';\n    $request->geo->gi = '<value>';\n    $request->geo->gr = '<value>';\n    $request->geo->gl = '<value>';\n    $request->geo->gd = '<value>';\n    $request->geo->gp = '<value>';\n    $request->geo->gu = '<value>';\n    $request->geo->gt = '<value>';\n    $request->geo->gn = '<value>';\n    $request->geo->gw = '<value>';\n    $request->geo->gy = '<value>';\n    $request->geo->ht = '<value>';\n    $request->geo->hm = '<value>';\n    $request->geo->va = '<value>';\n    $request->geo->hn = '<value>';\n    $request->geo->hk = '<value>';\n    $request->geo->hu = '<value>';\n    $request->geo->is = '<value>';\n    $request->geo->in = '<value>';\n    $request->geo->id = '<id>';\n    $request->geo->ir = '<value>';\n    $request->geo->iq = '<value>';\n    $request->geo->ie = '<value>';\n    $request->geo->il = '<value>';\n    $request->geo->it = '<value>';\n    $request->geo->jm = '<value>';\n    $request->geo->jp = '<value>';\n    $request->geo->jo = '<value>';\n    $request->geo->kz = '<value>';\n    $request->geo->ke = '<value>';\n    $request->geo->ki = '<value>';\n    $request->geo->kp = '<value>';\n    $request->geo->kr = '<value>';\n    $request->geo->kw = '<value>';\n    $request->geo->kg = '<value>';\n    $request->geo->la = '<value>';\n    $request->geo->lv = '<value>';\n    $request->geo->lb = '<value>';\n    $request->geo->ls = '<value>';\n    $request->geo->lr = '<value>';\n    $request->geo->ly = '<value>';\n    $request->geo->li = '<value>';\n    $request->geo->lt = '<value>';\n    $request->geo->lu = '<value>';\n    $request->geo->mo = '<value>';\n    $request->geo->mg = '<value>';\n    $request->geo->mw = '<value>';\n    $request->geo->my = '<value>';\n    $request->geo->mv = '<value>';\n    $request->geo->ml = '<value>';\n    $request->geo->mt = '<value>';\n    $request->geo->mh = '<value>';\n    $request->geo->mq = '<value>';\n    $request->geo->mr = '<value>';\n    $request->geo->mu = '<value>';\n    $request->geo->yt = '<value>';\n    $request->geo->mx = '<value>';\n    $request->geo->fm = '<value>';\n    $request->geo->md = '<value>';\n    $request->geo->mc = '<value>';\n    $request->geo->mn = '<value>';\n    $request->geo->ms = '<value>';\n    $request->geo->ma = '<value>';\n    $request->geo->mz = '<value>';\n    $request->geo->mm = '<value>';\n    $request->geo->na = '<value>';\n    $request->geo->nr = '<value>';\n    $request->geo->np = '<value>';\n    $request->geo->nl = '<value>';\n    $request->geo->nc = '<value>';\n    $request->geo->nz = '<value>';\n    $request->geo->ni = '<value>';\n    $request->geo->ne = '<value>';\n    $request->geo->ng = '<value>';\n    $request->geo->nu = '<value>';\n    $request->geo->nf = '<value>';\n    $request->geo->mk = '<value>';\n    $request->geo->mp = '<value>';\n    $request->geo->no = '<value>';\n    $request->geo->om = '<value>';\n    $request->geo->pk = '<value>';\n    $request->geo->pw = '<value>';\n    $request->geo->ps = '<value>';\n    $request->geo->pa = '<value>';\n    $request->geo->pg = '<value>';\n    $request->geo->py = '<value>';\n    $request->geo->pe = '<value>';\n    $request->geo->ph = '<value>';\n    $request->geo->pn = '<value>';\n    $request->geo->pl = '<value>';\n    $request->geo->pt = '<value>';\n    $request->geo->pr = '<value>';\n    $request->geo->qa = '<value>';\n    $request->geo->re = '<value>';\n    $request->geo->ro = '<value>';\n    $request->geo->ru = '<value>';\n    $request->geo->rw = '<value>';\n    $request->geo->sh = '<value>';\n    $request->geo->kn = '<value>';\n    $request->geo->lc = '<value>';\n    $request->geo->pm = '<value>';\n    $request->geo->vc = '<value>';\n    $request->geo->ws = '<value>';\n    $request->geo->sm = '<value>';\n    $request->geo->st = '<value>';\n    $request->geo->sa = '<value>';\n    $request->geo->sn = '<value>';\n    $request->geo->sc = '<value>';\n    $request->geo->sl = '<value>';\n    $request->geo->sg = '<value>';\n    $request->geo->sk = '<value>';\n    $request->geo->si = '<value>';\n    $request->geo->sb = '<value>';\n    $request->geo->so = '<value>';\n    $request->geo->za = '<value>';\n    $request->geo->gs = '<value>';\n    $request->geo->es = '<value>';\n    $request->geo->lk = '<value>';\n    $request->geo->sd = '<value>';\n    $request->geo->sr = '<value>';\n    $request->geo->sj = '<value>';\n    $request->geo->sz = '<value>';\n    $request->geo->se = '<value>';\n    $request->geo->ch = '<value>';\n    $request->geo->sy = '<value>';\n    $request->geo->tw = '<value>';\n    $request->geo->tj = '<value>';\n    $request->geo->tz = '<value>';\n    $request->geo->th = '<value>';\n    $request->geo->tl = '<value>';\n    $request->geo->tg = '<value>';\n    $request->geo->tk = '<value>';\n    $request->geo->to = '<value>';\n    $request->geo->tt = '<value>';\n    $request->geo->tn = '<value>';\n    $request->geo->tr = '<value>';\n    $request->geo->tm = '<value>';\n    $request->geo->tc = '<value>';\n    $request->geo->tv = '<value>';\n    $request->geo->ug = '<value>';\n    $request->geo->ua = '<value>';\n    $request->geo->ae = '<value>';\n    $request->geo->gb = '<value>';\n    $request->geo->us = '<value>';\n    $request->geo->um = '<value>';\n    $request->geo->uy = '<value>';\n    $request->geo->uz = '<value>';\n    $request->geo->vu = '<value>';\n    $request->geo->ve = '<value>';\n    $request->geo->vn = '<value>';\n    $request->geo->vg = '<value>';\n    $request->geo->vi = '<value>';\n    $request->geo->wf = '<value>';\n    $request->geo->eh = '<value>';\n    $request->geo->ye = '<value>';\n    $request->geo->zm = '<value>';\n    $request->geo->zw = '<value>';\n    $request->geo->ax = '<value>';\n    $request->geo->bq = '<value>';\n    $request->geo->cw = '<value>';\n    $request->geo->gg = '<value>';\n    $request->geo->im = '<value>';\n    $request->geo->je = '<value>';\n    $request->geo->me = '<value>';\n    $request->geo->bl = '<value>';\n    $request->geo->mf = '<value>';\n    $request->geo->rs = '<value>';\n    $request->geo->sx = '<value>';\n    $request->geo->ss = '<value>';\n    $request->geo->xk = '<value>';\n    $request->doIndex = false;;\n\n    $response = $sdk->links->upsert($request);\n\n    if ($response->linkSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: upsertLink, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.links.upsert(request={\n    \"url\": \"https://google.com\",\n    \"external_id\": \"123456\",\n    \"tag_ids\": [\n        \"clux0rgak00011...\",\n    ],\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"url\\\":\\\"https://google.com\\\",\\\"domain\\\":\\\"string\\\",\\\"key\\\":\\\"string\\\",\\\"externalId\\\":\\\"123456\\\",\\\"prefix\\\":\\\"string\\\",\\\"trackConversion\\\":false,\\\"archived\\\":false,\\\"publicStats\\\":false,\\\"tagIds\\\":\\\"string\\\",\\\"tagNames\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\",\\\"expiresAt\\\":\\\"string\\\",\\\"expiredUrl\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"proxy\\\":false,\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"image\\\":\\\"string\\\",\\\"video\\\":\\\"string\\\",\\\"rewrite\\\":false,\\\"ios\\\":\\\"string\\\",\\\"android\\\":\\\"string\\\",\\\"geo\\\":{\\\"AF\\\":\\\"string\\\",\\\"AL\\\":\\\"string\\\",\\\"DZ\\\":\\\"string\\\",\\\"AS\\\":\\\"string\\\",\\\"AD\\\":\\\"string\\\",\\\"AO\\\":\\\"string\\\",\\\"AI\\\":\\\"string\\\",\\\"AQ\\\":\\\"string\\\",\\\"AG\\\":\\\"string\\\",\\\"AR\\\":\\\"string\\\",\\\"AM\\\":\\\"string\\\",\\\"AW\\\":\\\"string\\\",\\\"AU\\\":\\\"string\\\",\\\"AT\\\":\\\"string\\\",\\\"AZ\\\":\\\"string\\\",\\\"BS\\\":\\\"string\\\",\\\"BH\\\":\\\"string\\\",\\\"BD\\\":\\\"string\\\",\\\"BB\\\":\\\"string\\\",\\\"BY\\\":\\\"string\\\",\\\"BE\\\":\\\"string\\\",\\\"BZ\\\":\\\"string\\\",\\\"BJ\\\":\\\"string\\\",\\\"BM\\\":\\\"string\\\",\\\"BT\\\":\\\"string\\\",\\\"BO\\\":\\\"string\\\",\\\"BA\\\":\\\"string\\\",\\\"BW\\\":\\\"string\\\",\\\"BV\\\":\\\"string\\\",\\\"BR\\\":\\\"string\\\",\\\"IO\\\":\\\"string\\\",\\\"BN\\\":\\\"string\\\",\\\"BG\\\":\\\"string\\\",\\\"BF\\\":\\\"string\\\",\\\"BI\\\":\\\"string\\\",\\\"KH\\\":\\\"string\\\",\\\"CM\\\":\\\"string\\\",\\\"CA\\\":\\\"string\\\",\\\"CV\\\":\\\"string\\\",\\\"KY\\\":\\\"string\\\",\\\"CF\\\":\\\"string\\\",\\\"TD\\\":\\\"string\\\",\\\"CL\\\":\\\"string\\\",\\\"CN\\\":\\\"string\\\",\\\"CX\\\":\\\"string\\\",\\\"CC\\\":\\\"string\\\",\\\"CO\\\":\\\"string\\\",\\\"KM\\\":\\\"string\\\",\\\"CG\\\":\\\"string\\\",\\\"CD\\\":\\\"string\\\",\\\"CK\\\":\\\"string\\\",\\\"CR\\\":\\\"string\\\",\\\"CI\\\":\\\"string\\\",\\\"HR\\\":\\\"string\\\",\\\"CU\\\":\\\"string\\\",\\\"CY\\\":\\\"string\\\",\\\"CZ\\\":\\\"string\\\",\\\"DK\\\":\\\"string\\\",\\\"DJ\\\":\\\"string\\\",\\\"DM\\\":\\\"string\\\",\\\"DO\\\":\\\"string\\\",\\\"EC\\\":\\\"string\\\",\\\"EG\\\":\\\"string\\\",\\\"SV\\\":\\\"string\\\",\\\"GQ\\\":\\\"string\\\",\\\"ER\\\":\\\"string\\\",\\\"EE\\\":\\\"string\\\",\\\"ET\\\":\\\"string\\\",\\\"FK\\\":\\\"string\\\",\\\"FO\\\":\\\"string\\\",\\\"FJ\\\":\\\"string\\\",\\\"FI\\\":\\\"string\\\",\\\"FR\\\":\\\"string\\\",\\\"GF\\\":\\\"string\\\",\\\"PF\\\":\\\"string\\\",\\\"TF\\\":\\\"string\\\",\\\"GA\\\":\\\"string\\\",\\\"GM\\\":\\\"string\\\",\\\"GE\\\":\\\"string\\\",\\\"DE\\\":\\\"string\\\",\\\"GH\\\":\\\"string\\\",\\\"GI\\\":\\\"string\\\",\\\"GR\\\":\\\"string\\\",\\\"GL\\\":\\\"string\\\",\\\"GD\\\":\\\"string\\\",\\\"GP\\\":\\\"string\\\",\\\"GU\\\":\\\"string\\\",\\\"GT\\\":\\\"string\\\",\\\"GN\\\":\\\"string\\\",\\\"GW\\\":\\\"string\\\",\\\"GY\\\":\\\"string\\\",\\\"HT\\\":\\\"string\\\",\\\"HM\\\":\\\"string\\\",\\\"VA\\\":\\\"string\\\",\\\"HN\\\":\\\"string\\\",\\\"HK\\\":\\\"string\\\",\\\"HU\\\":\\\"string\\\",\\\"IS\\\":\\\"string\\\",\\\"IN\\\":\\\"string\\\",\\\"ID\\\":\\\"string\\\",\\\"IR\\\":\\\"string\\\",\\\"IQ\\\":\\\"string\\\",\\\"IE\\\":\\\"string\\\",\\\"IL\\\":\\\"string\\\",\\\"IT\\\":\\\"string\\\",\\\"JM\\\":\\\"string\\\",\\\"JP\\\":\\\"string\\\",\\\"JO\\\":\\\"string\\\",\\\"KZ\\\":\\\"string\\\",\\\"KE\\\":\\\"string\\\",\\\"KI\\\":\\\"string\\\",\\\"KP\\\":\\\"string\\\",\\\"KR\\\":\\\"string\\\",\\\"KW\\\":\\\"string\\\",\\\"KG\\\":\\\"string\\\",\\\"LA\\\":\\\"string\\\",\\\"LV\\\":\\\"string\\\",\\\"LB\\\":\\\"string\\\",\\\"LS\\\":\\\"string\\\",\\\"LR\\\":\\\"string\\\",\\\"LY\\\":\\\"string\\\",\\\"LI\\\":\\\"string\\\",\\\"LT\\\":\\\"string\\\",\\\"LU\\\":\\\"string\\\",\\\"MO\\\":\\\"string\\\",\\\"MG\\\":\\\"string\\\",\\\"MW\\\":\\\"string\\\",\\\"MY\\\":\\\"string\\\",\\\"MV\\\":\\\"string\\\",\\\"ML\\\":\\\"string\\\",\\\"MT\\\":\\\"string\\\",\\\"MH\\\":\\\"string\\\",\\\"MQ\\\":\\\"string\\\",\\\"MR\\\":\\\"string\\\",\\\"MU\\\":\\\"string\\\",\\\"YT\\\":\\\"string\\\",\\\"MX\\\":\\\"string\\\",\\\"FM\\\":\\\"string\\\",\\\"MD\\\":\\\"string\\\",\\\"MC\\\":\\\"string\\\",\\\"MN\\\":\\\"string\\\",\\\"MS\\\":\\\"string\\\",\\\"MA\\\":\\\"string\\\",\\\"MZ\\\":\\\"string\\\",\\\"MM\\\":\\\"string\\\",\\\"NA\\\":\\\"string\\\",\\\"NR\\\":\\\"string\\\",\\\"NP\\\":\\\"string\\\",\\\"NL\\\":\\\"string\\\",\\\"NC\\\":\\\"string\\\",\\\"NZ\\\":\\\"string\\\",\\\"NI\\\":\\\"string\\\",\\\"NE\\\":\\\"string\\\",\\\"NG\\\":\\\"string\\\",\\\"NU\\\":\\\"string\\\",\\\"NF\\\":\\\"string\\\",\\\"MK\\\":\\\"string\\\",\\\"MP\\\":\\\"string\\\",\\\"NO\\\":\\\"string\\\",\\\"OM\\\":\\\"string\\\",\\\"PK\\\":\\\"string\\\",\\\"PW\\\":\\\"string\\\",\\\"PS\\\":\\\"string\\\",\\\"PA\\\":\\\"string\\\",\\\"PG\\\":\\\"string\\\",\\\"PY\\\":\\\"string\\\",\\\"PE\\\":\\\"string\\\",\\\"PH\\\":\\\"string\\\",\\\"PN\\\":\\\"string\\\",\\\"PL\\\":\\\"string\\\",\\\"PT\\\":\\\"string\\\",\\\"PR\\\":\\\"string\\\",\\\"QA\\\":\\\"string\\\",\\\"RE\\\":\\\"string\\\",\\\"RO\\\":\\\"string\\\",\\\"RU\\\":\\\"string\\\",\\\"RW\\\":\\\"string\\\",\\\"SH\\\":\\\"string\\\",\\\"KN\\\":\\\"string\\\",\\\"LC\\\":\\\"string\\\",\\\"PM\\\":\\\"string\\\",\\\"VC\\\":\\\"string\\\",\\\"WS\\\":\\\"string\\\",\\\"SM\\\":\\\"string\\\",\\\"ST\\\":\\\"string\\\",\\\"SA\\\":\\\"string\\\",\\\"SN\\\":\\\"string\\\",\\\"SC\\\":\\\"string\\\",\\\"SL\\\":\\\"string\\\",\\\"SG\\\":\\\"string\\\",\\\"SK\\\":\\\"string\\\",\\\"SI\\\":\\\"string\\\",\\\"SB\\\":\\\"string\\\",\\\"SO\\\":\\\"string\\\",\\\"ZA\\\":\\\"string\\\",\\\"GS\\\":\\\"string\\\",\\\"ES\\\":\\\"string\\\",\\\"LK\\\":\\\"string\\\",\\\"SD\\\":\\\"string\\\",\\\"SR\\\":\\\"string\\\",\\\"SJ\\\":\\\"string\\\",\\\"SZ\\\":\\\"string\\\",\\\"SE\\\":\\\"string\\\",\\\"CH\\\":\\\"string\\\",\\\"SY\\\":\\\"string\\\",\\\"TW\\\":\\\"string\\\",\\\"TJ\\\":\\\"string\\\",\\\"TZ\\\":\\\"string\\\",\\\"TH\\\":\\\"string\\\",\\\"TL\\\":\\\"string\\\",\\\"TG\\\":\\\"string\\\",\\\"TK\\\":\\\"string\\\",\\\"TO\\\":\\\"string\\\",\\\"TT\\\":\\\"string\\\",\\\"TN\\\":\\\"string\\\",\\\"TR\\\":\\\"string\\\",\\\"TM\\\":\\\"string\\\",\\\"TC\\\":\\\"string\\\",\\\"TV\\\":\\\"string\\\",\\\"UG\\\":\\\"string\\\",\\\"UA\\\":\\\"string\\\",\\\"AE\\\":\\\"string\\\",\\\"GB\\\":\\\"string\\\",\\\"US\\\":\\\"string\\\",\\\"UM\\\":\\\"string\\\",\\\"UY\\\":\\\"string\\\",\\\"UZ\\\":\\\"string\\\",\\\"VU\\\":\\\"string\\\",\\\"VE\\\":\\\"string\\\",\\\"VN\\\":\\\"string\\\",\\\"VG\\\":\\\"string\\\",\\\"VI\\\":\\\"string\\\",\\\"WF\\\":\\\"string\\\",\\\"EH\\\":\\\"string\\\",\\\"YE\\\":\\\"string\\\",\\\"ZM\\\":\\\"string\\\",\\\"ZW\\\":\\\"string\\\",\\\"AX\\\":\\\"string\\\",\\\"BQ\\\":\\\"string\\\",\\\"CW\\\":\\\"string\\\",\\\"GG\\\":\\\"string\\\",\\\"IM\\\":\\\"string\\\",\\\"JE\\\":\\\"string\\\",\\\"ME\\\":\\\"string\\\",\\\"BL\\\":\\\"string\\\",\\\"MF\\\":\\\"string\\\",\\\"RS\\\":\\\"string\\\",\\\"SX\\\":\\\"string\\\",\\\"SS\\\":\\\"string\\\",\\\"XK\\\":\\\"string\\\"},\\\"doIndex\\\":false}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/links/upsert\")\n  .put(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Upsert a link for the authenticated workspace by its URL. If a link with the same URL already exists, return it (or update it if there are any changes). Otherwise, a new link will be created."
      tags:
        - "Links"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "url":
                  type: "string"
                  description: "The destination URL of the short link."
                  example: "https://google.com"
                "domain":
                  type: "string"
                  description: "The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains)."
                "key":
                  type: "string"
                  description: "The short link slug. If not provided, a random 7-character slug will be generated."
                "externalId":
                  type: "string"
                  nullable: true
                  minLength: 1
                  maxLength: 255
                  description: "This is the ID of the link in your database. If set, it can be used to identify the link in the future. Must be prefixed with `ext_` when passed as a query parameter."
                  example: "123456"
                "prefix":
                  type: "string"
                  description: "The prefix of the short link slug for randomly-generated keys (e.g. if prefix is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if `key` is provided."
                "trackConversion":
                  type: "boolean"
                  default: false
                  description: "Whether to track conversions for the short link."
                "archived":
                  type: "boolean"
                  default: false
                  description: "Whether the short link is archived."
                "publicStats":
                  type: "boolean"
                  default: false
                  description: "Whether the short link's stats are publicly accessible."
                "tagId":
                  type: "string"
                  nullable: true
                  description: "The unique ID of the tag assigned to the short link. This field is deprecated – use `tagIds` instead."
                  deprecated: true
                "tagIds":
                  anyOf:
                    - type: "string"
                    - type: "array"
                      items:
                        type: "string"
                  description: "The unique IDs of the tags assigned to the short link."
                  example: ["clux0rgak00011..."]
                "tagNames":
                  anyOf:
                    - type: "string"
                    - type: "array"
                      items:
                        type: "string"
                  description: "The unique name of the tags assigned to the short link (case insensitive)."
                "comments":
                  type: "string"
                  nullable: true
                  description: "The comments for the short link."
                "expiresAt":
                  type: "string"
                  nullable: true
                  description: "The date and time when the short link will expire at."
                "expiredUrl":
                  type: "string"
                  nullable: true
                  description: "The URL to redirect to when the short link has expired."
                "password":
                  type: "string"
                  nullable: true
                  description: "The password required to access the destination URL of the short link."
                "proxy":
                  type: "boolean"
                  default: false
                  description: "Whether the short link uses Custom Social Media Cards feature."
                "title":
                  type: "string"
                  nullable: true
                  description: "The custom link preview title (og:title). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "description":
                  type: "string"
                  nullable: true
                  description: "The custom link preview description (og:description). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "image":
                  type: "string"
                  nullable: true
                  description: "The custom link preview image (og:image). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "video":
                  type: "string"
                  nullable: true
                  description: "The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
                "rewrite":
                  type: "boolean"
                  default: false
                  description: "Whether the short link uses link cloaking."
                "ios":
                  type: "string"
                  nullable: true
                  description: "The iOS destination URL for the short link for iOS device targeting."
                "android":
                  type: "string"
                  nullable: true
                  description: "The Android destination URL for the short link for Android device targeting."
                "geo": {"$ref": "#/components/schemas/linkGeoTargeting"}
                "doIndex":
                  type: "boolean"
                  default: false
                  description: "Allow search engines to index your short link. Defaults to `false` if not provided. Learn more: https://d.to/noindex"
              required:
                - "url"
      responses:
        "200":
          description: "The upserted link"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/qr":
    get:
      operationId: "getQRCode"
      x-speakeasy-name-override: "get"
      summary: "Retrieve a QR code"
      x-codeSamples: [{"lang": "typescript", "label": "getQRCode", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.qrCodes.get({\n    url: \"https://brief-micronutrient.org\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "getQRCode", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    request := operations.GetQRCodeRequest{\n        URL: \"https://brief-micronutrient.org\",\n    }\n    ctx := context.Background()\n    res, err := s.QRCodes.Get(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "getQRCode", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::GetQRCodeRequest.new(\n  url: \"https://brief-micronutrient.org\",\n)\n    \nres = s.qr_codes.get(req)\n\nif ! res.res.nil?\n  # handle response\nend"}, {"lang": "php", "label": "getQRCode", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\GetQRCodeRequest();\n    $request->url = 'https://brief-micronutrient.org';\n    $request->size = 5442.21;\n    $request->level = Operations\\Level::H;\n    $request->fgColor = '<value>';\n    $request->bgColor = '<value>';\n    $request->includeMargin = false;;\n\n    $response = $sdk->qrCodes->get($request);\n\n    if ($response->res !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: getQRCode, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.qr_codes.get(request={\n    \"url\": \"https://brief-micronutrient.org\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/qr\")\n  .get()\n  .addHeader(\"accept\", \"image/png\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve a QR code for a link."
      tags:
        - "QR Codes"
      parameters:
        - in: "query"
          name: "url"
          description: "The URL to generate a QR code for."
          schema:
            type: "string"
            description: "The URL to generate a QR code for."
          required: true
        - in: "query"
          name: "size"
          description: "The size of the QR code in pixels. Defaults to `600` if not provided."
          schema:
            type: "number"
            default: 600
            description: "The size of the QR code in pixels. Defaults to `600` if not provided."
        - in: "query"
          name: "level"
          description: "The level of error correction to use for the QR code. Defaults to `L` if not provided."
          schema:
            type: "string"
            enum:
              - "L"
              - "M"
              - "Q"
              - "H"
            default: "L"
            description: "The level of error correction to use for the QR code. Defaults to `L` if not provided."
        - in: "query"
          name: "fgColor"
          description: "The foreground color of the QR code in hex format. Defaults to `#000000` if not provided."
          schema:
            type: "string"
            default: "#000000"
            description: "The foreground color of the QR code in hex format. Defaults to `#000000` if not provided."
        - in: "query"
          name: "bgColor"
          description: "The background color of the QR code in hex format. Defaults to `#ffffff` if not provided."
          schema:
            type: "string"
            default: "#FFFFFF"
            description: "The background color of the QR code in hex format. Defaults to `#ffffff` if not provided."
        - in: "query"
          name: "includeMargin"
          description: "Whether to include a margin around the QR code. Defaults to `false` if not provided."
          schema:
            type: "boolean"
            default: "false"
            description: "Whether to include a margin around the QR code. Defaults to `false` if not provided."
      responses:
        "200":
          description: "The QR code"
          content:
            "image/png":
              schema:
                type: "string"
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/analytics":
    get:
      operationId: "retrieveAnalytics"
      x-speakeasy-name-override: "retrieve"
      summary: "Retrieve analytics for a link, a domain, or the authenticated workspace."
      x-codeSamples: [{"lang": "typescript", "label": "retrieveAnalytics", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.analytics.retrieve({});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "retrieveAnalytics", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    request := operations.RetrieveAnalyticsRequest{\n        Timezone: dubgo.String(\"America/New_York\"),\n        City: dubgo.String(\"New York\"),\n        Device: dubgo.String(\"Desktop\"),\n        Browser: dubgo.String(\"Chrome\"),\n        Os: dubgo.String(\"Windows\"),\n        Referer: dubgo.String(\"google.com\"),\n    }\n    ctx := context.Background()\n    res, err := s.Analytics.Retrieve(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "retrieveAnalytics", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(\n  timezone: \"America/New_York\",\n  city: \"New York\",\n  device: \"Desktop\",\n  browser: \"Chrome\",\n  os: \"Windows\",\n  referer: \"google.com\",\n)\n    \nres = s.analytics.retrieve(req)\n\nif ! res.one_of.nil?\n  # handle response\nend"}, {"lang": "php", "label": "retrieveAnalytics", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\RetrieveAnalyticsRequest();\n    $request->event = Operations\\Event::Leads;\n    $request->groupBy = Operations\\GroupBy::Trigger;\n    $request->domain = 'vacant-platter.biz';\n    $request->key = '<key>';\n    $request->linkId = '<value>';\n    $request->externalId = '<value>';\n    $request->interval = Operations\\Interval::Ninetyd;\n    $request->start = '<value>';\n    $request->end = '<value>';\n    $request->timezone = 'America/New_York';\n    $request->country = Components\\CountryCode::Gh;\n    $request->city = 'New York';\n    $request->device = 'Desktop';\n    $request->browser = 'Chrome';\n    $request->os = 'Windows';\n    $request->referer = 'google.com';\n    $request->url = 'https://bright-alpenhorn.name';\n    $request->tagId = '<value>';\n    $request->qr = false;\n    $request->root = false;;\n\n    $response = $sdk->analytics->retrieve($request);\n\n    if ($response->oneOf !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: retrieveAnalytics, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.analytics.retrieve(request={\n    \"timezone\": \"America/New_York\",\n    \"city\": \"New York\",\n    \"device\": \"Desktop\",\n    \"browser\": \"Chrome\",\n    \"os\": \"Windows\",\n    \"referer\": \"google.com\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/analytics\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve analytics for a link, a domain, or the authenticated workspace. The response type depends on the `event` and `type` query parameters."
      tags:
        - "Analytics"
      security:
        - token: []
      parameters:
        - in: "query"
          name: "event"
          description: "The type of event to retrieve analytics for. Defaults to 'clicks'."
          schema:
            type: "string"
            enum:
              - "clicks"
              - "leads"
              - "sales"
              - "composite"
            default: "clicks"
            description: "The type of event to retrieve analytics for. Defaults to 'clicks'."
        - in: "query"
          name: "groupBy"
          description: "The parameter to group the analytics data points by. Defaults to 'count' if undefined."
          schema:
            type: "string"
            enum:
              - "count"
              - "timeseries"
              - "countries"
              - "cities"
              - "devices"
              - "browsers"
              - "os"
              - "referers"
              - "top_links"
              - "top_urls"
              - "trigger"
            default: "count"
            description: "The parameter to group the analytics data points by. Defaults to 'count' if undefined."
        - in: "query"
          name: "domain"
          description: "The domain to filter analytics for."
          schema:
            type: "string"
            description: "The domain to filter analytics for."
        - in: "query"
          name: "key"
          description: "The short link slug."
          schema:
            type: "string"
            description: "The short link slug."
        - in: "query"
          name: "linkId"
          description: "The unique ID of the short link on Dub."
          schema:
            type: "string"
            description: "The unique ID of the short link on Dub."
        - in: "query"
          name: "externalId"
          description: "This is the ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter."
          schema:
            type: "string"
            description: "This is the ID of the link in the your database. Must be prefixed with 'ext_' when passed as a query parameter."
        - in: "query"
          name: "interval"
          description: "The interval to retrieve analytics for. Takes precedence over start and end. If undefined, defaults to 24h."
          schema:
            type: "string"
            enum:
              - "24h"
              - "7d"
              - "30d"
              - "90d"
              - "ytd"
              - "1y"
              - "all"
              - "all_unfiltered"
            description: "The interval to retrieve analytics for. Takes precedence over start and end. If undefined, defaults to 24h."
        - in: "query"
          name: "start"
          description: "The start date and time when to retrieve analytics from."
          schema:
            type: "string"
            description: "The start date and time when to retrieve analytics from."
        - in: "query"
          name: "end"
          description: "The end date and time when to retrieve analytics from. If not provided, defaults to the current date."
          schema:
            type: "string"
            description: "The end date and time when to retrieve analytics from. If not provided, defaults to the current date."
        - in: "query"
          name: "timezone"
          description: "The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC."
          schema:
            type: "string"
            description: "The IANA time zone code for aligning timeseries granularity (e.g. America/New_York). Defaults to UTC."
            example: "America/New_York"
            default: "UTC"
        - in: "query"
          name: "country"
          description: "The country to retrieve analytics for."
          schema: {"$ref": "#/components/schemas/countryCode"}
        - in: "query"
          name: "city"
          description: "The city to retrieve analytics for."
          schema:
            type: "string"
            description: "The city to retrieve analytics for."
            example: "New York"
        - in: "query"
          name: "device"
          description: "The device to retrieve analytics for."
          schema:
            type: "string"
            description: "The device to retrieve analytics for."
            example: "Desktop"
        - in: "query"
          name: "browser"
          description: "The browser to retrieve analytics for."
          schema:
            type: "string"
            description: "The browser to retrieve analytics for."
            example: "Chrome"
        - in: "query"
          name: "os"
          description: "The OS to retrieve analytics for."
          schema:
            type: "string"
            description: "The OS to retrieve analytics for."
            example: "Windows"
        - in: "query"
          name: "referer"
          description: "The referer to retrieve analytics for."
          schema:
            type: "string"
            description: "The referer to retrieve analytics for."
            example: "google.com"
        - in: "query"
          name: "url"
          description: "The URL to retrieve analytics for."
          schema:
            type: "string"
            description: "The URL to retrieve analytics for."
        - in: "query"
          name: "tagId"
          description: "The tag ID to retrieve analytics for."
          schema:
            type: "string"
            description: "The tag ID to retrieve analytics for."
        - in: "query"
          name: "qr"
          description: "Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both."
          schema:
            type: "boolean"
            description: "Filter for QR code scans. If true, filter for QR codes only. If false, filter for links only. If undefined, return both."
        - in: "query"
          name: "root"
          description: "Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both."
          schema:
            type: "boolean"
            description: "Filter for root domains. If true, filter for domains only. If false, filter for links only. If undefined, return both."
      responses:
        "200":
          description: "Analytics data"
          content:
            "application/json":
              schema:
                anyOf:
                  - {"$ref": "#/components/schemas/ClicksCount"}
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksTimeseries"}
                    title: "ClickTimeseries"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksCountries"}
                    title: "ClickCountries"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksCities"}
                    title: "ClickCities"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksDevices"}
                    title: "ClickDevices"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksBrowsers"}
                    title: "ClickBrowsers"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksOS"}
                    title: "ClickOS"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksReferers"}
                    title: "ClickReferers"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksTopLinks"}
                    title: "ClickTopLinks"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/ClicksTopUrls"}
                    title: "ClickTopUrls"
                  - {"$ref": "#/components/schemas/LeadsCount"}
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsTimeseries"}
                    title: "LeadsTimeseries"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsCountries"}
                    title: "LeadsCountries"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsCities"}
                    title: "LeadsCities"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsDevices"}
                    title: "LeadsDevices"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsBrowsers"}
                    title: "LeadsBrowsers"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsOS"}
                    title: "LeadsOS"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsReferers"}
                    title: "LeadsReferers"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsTopLinks"}
                    title: "LeadsTopLinks"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/LeadsTopUrls"}
                    title: "LeadsTopUrls"
                  - {"$ref": "#/components/schemas/SalesCount"}
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesTimeseries"}
                    title: "SalesTimeseries"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesCountries"}
                    title: "SalesCountries"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesCities"}
                    title: "SalesCities"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesDevices"}
                    title: "SalesDevices"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesBrowsers"}
                    title: "SalesBrowsers"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesOS"}
                    title: "SalesOS"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesReferers"}
                    title: "SalesReferers"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesTopLinks"}
                    title: "SalesTopLinks"
                  - type: "array"
                    items: {"$ref": "#/components/schemas/SalesTopUrls"}
                    title: "SalesTopUrls"
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/workspaces/{idOrSlug}":
    get:
      operationId: "getWorkspace"
      x-speakeasy-name-override: "get"
      summary: "Retrieve a workspace"
      x-codeSamples: [{"lang": "typescript", "label": "getWorkspace", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.workspaces.get({\n    idOrSlug: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "getWorkspace", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    request := operations.GetWorkspaceRequest{\n        IDOrSlug: \"<value>\",\n    }\n    ctx := context.Background()\n    res, err := s.Workspaces.Get(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "getWorkspace", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::GetWorkspaceRequest.new(\n  id_or_slug: \"<value>\",\n)\n    \nres = s.workspaces.get(req)\n\nif ! res.workspace_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "getWorkspace", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n    \n\n    $response = $sdk->workspaces->get('<value>');\n\n    if ($response->workspaceSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: getWorkspace, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.workspaces.get(request={\n    \"id_or_slug\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/workspaces/idOrSlug\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve a workspace for the authenticated user."
      tags:
        - "Workspaces"
      security:
        - token: []
      parameters:
        - in: "path"
          name: "idOrSlug"
          description: "The ID or slug of the workspace."
          schema:
            type: "string"
            description: "The ID or slug of the workspace."
          required: true
      responses:
        "200":
          description: "The retrieved workspace"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspaceSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
    patch:
      operationId: "updateWorkspace"
      x-speakeasy-name-override: "update"
      x-speakeasy-max-method-params: 2
      summary: "Update a workspace"
      x-codeSamples: [{"lang": "typescript", "label": "updateWorkspace", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.workspaces.update(\"<value>\", {});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "updateWorkspace", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var idOrSlug string = \"<value>\"\n\n    var requestBody *operations.UpdateWorkspaceRequestBody = &operations.UpdateWorkspaceRequestBody{}\n    ctx := context.Background()\n    res, err := s.Workspaces.Update(ctx, idOrSlug, requestBody)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "updateWorkspace", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.workspaces.update(id_or_slug=\"<value>\", request_body=::OpenApiSDK::Operations::UpdateWorkspaceRequestBody.new())\n\nif ! res.workspace_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "updateWorkspace", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $requestBody = new Operations\\UpdateWorkspaceRequestBody();\n    $requestBody->name = '<value>';\n    $requestBody->slug = '<value>';\n\n    $response = $sdk->workspaces->update('<value>', $requestBody);\n\n    if ($response->workspaceSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: updateWorkspace, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.workspaces.update(id_or_slug=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/workspaces/idOrSlug\")\n  .patch(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Update a workspace by ID or slug."
      tags:
        - "Workspaces"
      security:
        - token: []
      parameters:
        - in: "path"
          name: "idOrSlug"
          description: "The ID or slug of the workspace to update."
          schema:
            type: "string"
            description: "The ID or slug of the workspace to update."
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "name":
                  type: "string"
                  minLength: 1
                  maxLength: 32
                "slug":
                  type: "string"
                  minLength: 3
                  maxLength: 48
      responses:
        "200":
          description: "The updated workspace."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkspaceSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/tags":
    post:
      operationId: "createTag"
      x-speakeasy-name-override: "create"
      summary: "Create a new tag"
      x-codeSamples: [{"lang": "typescript", "label": "createTag", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.tags.create({});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "createTag", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.CreateTagRequestBody = &operations.CreateTagRequestBody{}\n    ctx := context.Background()\n    res, err := s.Tags.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "createTag", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::CreateTagRequestBody.new()\n    \nres = s.tags.create(req)\n\nif ! res.tag_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "createTag", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\CreateTagRequestBody();\n    $request->name = '<value>';\n    $request->color = Operations\\Color::Blue;\n    $request->tag = '<value>';;\n\n    $response = $sdk->tags->create($request);\n\n    if ($response->tagSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: createTag, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.tags.create()\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"string\\\",\\\"color\\\":\\\"red\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/tags\")\n  .post(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Create a new tag for the authenticated workspace."
      tags:
        - "Tags"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "name":
                  type: "string"
                  minLength: 1
                  description: "The name of the tag to create."
                "color":
                  type: "string"
                  enum:
                    - "red"
                    - "yellow"
                    - "green"
                    - "blue"
                    - "purple"
                    - "pink"
                    - "brown"
                  description: "The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown."
                "tag":
                  type: "string"
                  minLength: 1
                  description: "The name of the tag to create."
                  deprecated: true
      responses:
        "201":
          description: "The created tag"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TagSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
    get:
      operationId: "getTags"
      x-speakeasy-name-override: "list"
      summary: "Retrieve a list of tags"
      x-codeSamples: [{"lang": "typescript", "label": "getTags", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.tags.list();\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "getTags", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Tags.List(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "getTags", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.tags.list()\n\nif ! res.tag_schemas.nil?\n  # handle response\nend"}, {"lang": "php", "label": "getTags", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n    $response = $sdk->tags->list();\n\n    if ($response->tagSchemas !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: getTags, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.tags.list()\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/tags\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve a list of tags for the authenticated workspace."
      tags:
        - "Tags"
      security:
        - token: []
      responses:
        "200":
          description: "A list of tags"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/TagSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/tags/{id}":
    patch:
      operationId: "updateTag"
      x-speakeasy-name-override: "update"
      x-speakeasy-max-method-params: 2
      summary: "Update a tag"
      x-codeSamples: [{"lang": "typescript", "label": "updateTag", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.tags.update(\"<value>\", {});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "updateTag", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var id string = \"<value>\"\n\n    var requestBody *operations.UpdateTagRequestBody = &operations.UpdateTagRequestBody{}\n    ctx := context.Background()\n    res, err := s.Tags.Update(ctx, id, requestBody)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "updateTag", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.tags.update(id=\"<value>\", request_body=::OpenApiSDK::Operations::UpdateTagRequestBody.new())\n\nif ! res.tag_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "updateTag", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $requestBody = new Operations\\UpdateTagRequestBody();\n    $requestBody->name = '<value>';\n    $requestBody->color = Operations\\UpdateTagColor::Brown;\n    $requestBody->tag = '<value>';\n\n    $response = $sdk->tags->update('<value>', $requestBody);\n\n    if ($response->tagSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: updateTag, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.tags.update(id=\"<value>\")\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"string\\\",\\\"color\\\":\\\"red\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/tags/id\")\n  .patch(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Update a tag in the workspace."
      tags:
        - "Tags"
      security:
        - token: []
      parameters:
        - in: "path"
          name: "id"
          description: "The ID of the tag to update."
          schema:
            type: "string"
            description: "The ID of the tag to update."
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "name":
                  type: "string"
                  minLength: 1
                  description: "The name of the tag to create."
                "color":
                  type: "string"
                  enum:
                    - "red"
                    - "yellow"
                    - "green"
                    - "blue"
                    - "purple"
                    - "pink"
                    - "brown"
                  description: "The color of the tag. If not provided, a random color will be used from the list: red, yellow, green, blue, purple, pink, brown."
                "tag":
                  type: "string"
                  minLength: 1
                  description: "The name of the tag to create."
                  deprecated: true
      responses:
        "200":
          description: "The updated tag."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TagSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/domains":
    post:
      operationId: "createDomain"
      x-speakeasy-name-override: "create"
      summary: "Create a domain"
      x-codeSamples: [{"lang": "typescript", "label": "createDomain", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.domains.create({\n    slug: \"acme.com\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "createDomain", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.CreateDomainRequestBody = &operations.CreateDomainRequestBody{\n        Slug: \"acme.com\",\n        ExpiredURL: dubgo.String(\"https://acme.com/expired\"),\n        Archived: dubgo.Bool(false),\n        Placeholder: dubgo.String(\"https://dub.co/help/article/what-is-dub\"),\n    }\n    ctx := context.Background()\n    res, err := s.Domains.Create(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "createDomain", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::CreateDomainRequestBody.new(\n  slug: \"acme.com\",\n  expired_url: \"https://acme.com/expired\",\n  archived: false,\n  placeholder: \"https://dub.co/help/article/what-is-dub\",\n)\n    \nres = s.domains.create(req)\n\nif ! res.domain_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "createDomain", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\CreateDomainRequestBody();\n    $request->slug = 'acme.com';\n    $request->expiredUrl = 'https://acme.com/expired';\n    $request->archived = false;\n    $request->placeholder = 'https://dub.co/help/article/what-is-dub';;\n\n    $response = $sdk->domains->create($request);\n\n    if ($response->domainSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: createDomain, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.domains.create(request={\n    \"slug\": \"acme.com\",\n    \"expired_url\": \"https://acme.com/expired\",\n    \"archived\": False,\n    \"placeholder\": \"https://dub.co/help/article/what-is-dub\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"slug\\\":\\\"acme.com\\\",\\\"expiredUrl\\\":\\\"https://acme.com/expired\\\",\\\"archived\\\":false,\\\"placeholder\\\":\\\"https://dub.co/help/article/what-is-dub\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/domains\")\n  .post(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Create a domain for the authenticated workspace."
      tags:
        - "Domains"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "slug":
                  type: "string"
                  minLength: 1
                  description: "Name of the domain."
                  example: "acme.com"
                "expiredUrl":
                  type: "string"
                  nullable: true
                  description: "Redirect users to a specific URL when any link under this domain has expired."
                  example: "https://acme.com/expired"
                "archived":
                  type: "boolean"
                  default: false
                  description: "Whether to archive this domain. `false` will unarchive a previously archived domain."
                  example: false
                "placeholder":
                  type: "string"
                  nullable: true
                  default: "https://dub.co/help/article/what-is-dub"
                  description: "Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened."
                  example: "https://dub.co/help/article/what-is-dub"
              required:
                - "slug"
      responses:
        "201":
          description: "The domain was created."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DomainSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
    get:
      operationId: "listDomains"
      x-speakeasy-name-override: "list"
      summary: "Retrieve a list of domains"
      x-codeSamples: [{"lang": "typescript", "label": "listDomains", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.domains.list();\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "listDomains", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n\n    ctx := context.Background()\n    res, err := s.Domains.List(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "listDomains", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.domains.list()\n\nif ! res.domain_schemas.nil?\n  # handle response\nend"}, {"lang": "php", "label": "listDomains", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n    $response = $sdk->domains->list();\n\n    if ($response->domainSchemas !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: listDomains, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.domains.list()\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/domains\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve a list of domains associated with the authenticated workspace."
      tags:
        - "Domains"
      security:
        - token: []
      responses:
        "200":
          description: "The domains were retrieved."
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/DomainSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/domains/{slug}":
    patch:
      operationId: "updateDomain"
      x-speakeasy-name-override: "update"
      x-speakeasy-max-method-params: 2
      summary: "Update a domain"
      x-codeSamples: [{"lang": "typescript", "label": "updateDomain", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.domains.update(\"acme.com\", {});\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "updateDomain", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var slug string = \"acme.com\"\n\n    var requestBody *operations.UpdateDomainRequestBody = &operations.UpdateDomainRequestBody{\n        Slug: dubgo.String(\"acme.com\"),\n        ExpiredURL: dubgo.String(\"https://acme.com/expired\"),\n        Archived: dubgo.Bool(false),\n        Placeholder: dubgo.String(\"https://dub.co/help/article/what-is-dub\"),\n    }\n    ctx := context.Background()\n    res, err := s.Domains.Update(ctx, slug, requestBody)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "updateDomain", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.domains.update(slug=\"acme.com\", request_body=::OpenApiSDK::Operations::UpdateDomainRequestBody.new(\n    slug: \"acme.com\",\n    expired_url: \"https://acme.com/expired\",\n    archived: false,\n    placeholder: \"https://dub.co/help/article/what-is-dub\",\n  ))\n\nif ! res.domain_schema.nil?\n  # handle response\nend"}, {"lang": "php", "label": "updateDomain", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $requestBody = new Operations\\UpdateDomainRequestBody();\n    $requestBody->slug = 'acme.com';\n    $requestBody->expiredUrl = 'https://acme.com/expired';\n    $requestBody->archived = false;\n    $requestBody->placeholder = 'https://dub.co/help/article/what-is-dub';\n\n    $response = $sdk->domains->update('acme.com', $requestBody);\n\n    if ($response->domainSchema !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: updateDomain, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.domains.update(slug=\"acme.com\", request_body={\n    \"slug\": \"acme.com\",\n    \"expired_url\": \"https://acme.com/expired\",\n    \"archived\": False,\n    \"placeholder\": \"https://dub.co/help/article/what-is-dub\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"slug\\\":\\\"acme.com\\\",\\\"expiredUrl\\\":\\\"https://acme.com/expired\\\",\\\"archived\\\":false,\\\"placeholder\\\":\\\"https://dub.co/help/article/what-is-dub\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/domains/slug\")\n  .patch(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Update a domain for the authenticated workspace."
      tags:
        - "Domains"
      security:
        - token: []
      parameters:
        - in: "path"
          name: "slug"
          description: "The domain name."
          schema:
            type: "string"
            description: "The domain name."
            example: "acme.com"
          required: true
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "slug":
                  type: "string"
                  minLength: 1
                  description: "Name of the domain."
                  example: "acme.com"
                "expiredUrl":
                  type: "string"
                  nullable: true
                  description: "Redirect users to a specific URL when any link under this domain has expired."
                  example: "https://acme.com/expired"
                "archived":
                  type: "boolean"
                  default: false
                  description: "Whether to archive this domain. `false` will unarchive a previously archived domain."
                  example: false
                "placeholder":
                  type: "string"
                  nullable: true
                  default: "https://dub.co/help/article/what-is-dub"
                  description: "Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened."
                  example: "https://dub.co/help/article/what-is-dub"
      responses:
        "200":
          description: "The domain was updated."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DomainSchema"}
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
    delete:
      operationId: "deleteDomain"
      x-speakeasy-name-override: "delete"
      x-speakeasy-max-method-params: 1
      summary: "Delete a domain"
      x-codeSamples: [{"lang": "typescript", "label": "deleteDomain", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.domains.delete(\"acme.com\");\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "deleteDomain", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var slug string = \"acme.com\"\n    ctx := context.Background()\n    res, err := s.Domains.Delete(ctx, slug)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "deleteDomain", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n    \nres = s.domains.delete(slug=\"acme.com\")\n\nif ! res.object.nil?\n  # handle response\nend"}, {"lang": "php", "label": "deleteDomain", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n    \n\n    $response = $sdk->domains->delete('acme.com');\n\n    if ($response->object !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: deleteDomain, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.domains.delete(slug=\"acme.com\")\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/domains/slug\")\n  .delete(null)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Delete a domain from a workspace. It cannot be undone. This will also delete all the links associated with the domain."
      tags:
        - "Domains"
      security:
        - token: []
      parameters:
        - in: "path"
          name: "slug"
          description: "The domain name."
          schema:
            type: "string"
            description: "The domain name."
            example: "acme.com"
          required: true
      responses:
        "200":
          description: "The domain was deleted."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "slug":
                    type: "string"
                    description: "The domain name."
                    example: "acme.com"
                required:
                  - "slug"
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/track/lead":
    post:
      operationId: "trackLead"
      x-speakeasy-name-override: "lead"
      summary: "Track a lead"
      x-codeSamples: [{"lang": "typescript", "label": "trackLead", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.track.lead({\n    clickId: \"<value>\",\n    eventName: \"Sign up\",\n    customerId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "trackLead", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.TrackLeadRequestBody = &operations.TrackLeadRequestBody{\n        ClickID: \"<value>\",\n        EventName: \"Sign up\",\n        CustomerID: \"<value>\",\n    }\n    ctx := context.Background()\n    res, err := s.Track.Lead(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "trackLead", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::TrackLeadRequestBody.new(\n  click_id: \"<value>\",\n  event_name: \"Sign up\",\n  customer_id: \"<value>\",\n)\n    \nres = s.track.lead(req)\n\nif ! res.object.nil?\n  # handle response\nend"}, {"lang": "php", "label": "trackLead", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\TrackLeadRequestBody();\n    $request->clickId = '<value>';\n    $request->eventName = 'Sign up';\n    $request->customerId = '<value>';\n    $request->customerName = '<value>';\n    $request->customerEmail = 'Katelin24@hotmail.com';\n    $request->customerAvatar = '<value>';\n    $request->metadata = [\n        'Assistant' => '<value>',\n    ];;\n\n    $response = $sdk->track->lead($request);\n\n    if ($response->object !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: trackLead, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.track.lead(request={\n    \"click_id\": \"<value>\",\n    \"event_name\": \"Sign up\",\n    \"customer_id\": \"<value>\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"clickId\\\":\\\"string\\\",\\\"eventName\\\":\\\"Sign up\\\",\\\"customerId\\\":\\\"string\\\",\\\"customerName\\\":\\\"string\\\",\\\"customerEmail\\\":\\\"user@example.com\\\",\\\"customerAvatar\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/track/lead\")\n  .post(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Track a lead for a short link."
      tags:
        - "Track"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "clickId":
                  type: "string"
                  minLength: 1
                  description: "The ID of the click in th Dub. You can read this value from `dclid` cookie."
                "eventName":
                  type: "string"
                  minLength: 1
                  maxLength: 50
                  description: "The name of the event to track."
                  example: "Sign up"
                "customerId":
                  type: "string"
                  minLength: 1
                  maxLength: 100
                  description: "This is the unique identifier for the customer in the client's app. This is used to track the customer's journey."
                "customerName":
                  type: "string"
                  nullable: true
                  maxLength: 100
                  description: "Name of the customer in the client's app."
                "customerEmail":
                  type: "string"
                  nullable: true
                  format: "email"
                  maxLength: 100
                  description: "Email of the customer in the client's app."
                "customerAvatar":
                  type: "string"
                  nullable: true
                  maxLength: 100
                  description: "Avatar of the customer in the client's app."
                "metadata":
                  type: "object"
                  nullable: true
                  additionalProperties: {}
                  description: "Additional metadata to be stored with the lead event"
              required:
                - "clickId"
                - "eventName"
                - "customerId"
      responses:
        "200":
          description: "A lead was tracked."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "clickId":
                    type: "string"
                  "eventName":
                    type: "string"
                  "customerId":
                    type: "string"
                  "customerName":
                    type: "string"
                    nullable: true
                  "customerEmail":
                    type: "string"
                    nullable: true
                  "customerAvatar":
                    type: "string"
                    nullable: true
                  "metadata":
                    type: "object"
                    additionalProperties: {}
                required:
                  - "clickId"
                  - "eventName"
                  - "customerId"
                  - "customerName"
                  - "customerEmail"
                  - "customerAvatar"
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/track/sale":
    post:
      operationId: "trackSale"
      x-speakeasy-name-override: "sale"
      summary: "Track a sale"
      x-codeSamples: [{"lang": "typescript", "label": "trackSale", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.track.sale({\n    customerId: \"<value>\",\n    amount: 996500,\n    paymentProcessor: \"shopify\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "trackSale", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.TrackSaleRequestBody = &operations.TrackSaleRequestBody{\n        CustomerID: \"<value>\",\n        Amount: 996500,\n        PaymentProcessor: operations.PaymentProcessorShopify,\n        EventName: dubgo.String(\"Purchase\"),\n    }\n    ctx := context.Background()\n    res, err := s.Track.Sale(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "trackSale", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::TrackSaleRequestBody.new(\n  customer_id: \"<value>\",\n  amount: 996500,\n  payment_processor: ::OpenApiSDK::Operations::PaymentProcessor::SHOPIFY,\n  event_name: \"Purchase\",\n)\n    \nres = s.track.sale(req)\n\nif ! res.object.nil?\n  # handle response\nend"}, {"lang": "php", "label": "trackSale", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\TrackSaleRequestBody();\n    $request->customerId = '<value>';\n    $request->amount = 996500;\n    $request->paymentProcessor = Operations\\PaymentProcessor::Shopify;\n    $request->eventName = 'Purchase';\n    $request->invoiceId = '<value>';\n    $request->currency = 'European Unit of Account 17(E.U.A.-17)';\n    $request->metadata = [\n        'Stage' => '<value>',\n    ];;\n\n    $response = $sdk->track->sale($request);\n\n    if ($response->object !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: trackSale, source: "from dub import Dub\nfrom dub.models import operations\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.track.sale(request={\n    \"customer_id\": \"<value>\",\n    \"amount\": 996500,\n    \"payment_processor\": operations.PaymentProcessor.SHOPIFY,\n    \"event_name\": \"Purchase\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"customerId\\\":\\\"string\\\",\\\"amount\\\":0,\\\"paymentProcessor\\\":\\\"stripe\\\",\\\"eventName\\\":\\\"Purchase\\\",\\\"invoiceId\\\":\\\"string\\\",\\\"currency\\\":\\\"usd\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/track/sale\")\n  .post(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Track a sale for a short link."
      tags:
        - "Track"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "customerId":
                  type: "string"
                  minLength: 1
                  maxLength: 100
                  description: "This is the unique identifier for the customer in the client's app. This is used to track the customer's journey."
                "amount":
                  type: "integer"
                  minimum: 0
                  exclusiveMinimum: true
                  description: "The amount of the sale. Should be passed in cents."
                "paymentProcessor":
                  type: "string"
                  enum:
                    - "stripe"
                    - "shopify"
                    - "paddle"
                  description: "The payment processor via which the sale was made."
                "eventName":
                  type: "string"
                  maxLength: 50
                  default: "Purchase"
                  description: "The name of the sale event. It can be used to track different types of event for example 'Purchase', 'Upgrade', 'Payment', etc."
                  example: "Purchase"
                "invoiceId":
                  type: "string"
                  nullable: true
                  default: null
                  description: "The invoice ID of the sale."
                "currency":
                  type: "string"
                  default: "usd"
                  description: "The currency of the sale. Accepts ISO 4217 currency codes."
                "metadata":
                  type: "object"
                  nullable: true
                  additionalProperties: {}
                  default: null
                  description: "Additional metadata to be stored with the sale event."
              required:
                - "customerId"
                - "amount"
                - "paymentProcessor"
      responses:
        "200":
          description: "A sale was tracked."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "eventName":
                    type: "string"
                  "customerId":
                    type: "string"
                  "amount":
                    type: "number"
                  "paymentProcessor":
                    type: "string"
                  "invoiceId":
                    type: "string"
                    nullable: true
                  "currency":
                    type: "string"
                  "metadata":
                    type: "object"
                    nullable: true
                    additionalProperties: {}
                required:
                  - "eventName"
                  - "customerId"
                  - "amount"
                  - "paymentProcessor"
                  - "invoiceId"
                  - "currency"
                  - "metadata"
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/track/customer":
    post:
      operationId: "trackCustomer"
      x-speakeasy-name-override: "customer"
      summary: "Track a customer"
      x-codeSamples: [{"lang": "typescript", "label": "trackCustomer", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.track.customer({\n    customerId: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "trackCustomer", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    var request *operations.TrackCustomerRequestBody = &operations.TrackCustomerRequestBody{\n        CustomerID: \"<value>\",\n    }\n    ctx := context.Background()\n    res, err := s.Track.Customer(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "trackCustomer", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::TrackCustomerRequestBody.new(\n  customer_id: \"<value>\",\n)\n    \nres = s.track.customer(req)\n\nif ! res.object.nil?\n  # handle response\nend"}, {"lang": "php", "label": "trackCustomer", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n        $request = new Operations\\TrackCustomerRequestBody();\n    $request->customerId = '<value>';\n    $request->customerName = '<value>';\n    $request->customerEmail = 'Wilson.Smith@gmail.com';\n    $request->customerAvatar = '<value>';;\n\n    $response = $sdk->track->customer($request);\n\n    if ($response->object !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: trackCustomer, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.track.customer()\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"customerId\\\":\\\"string\\\",\\\"customerName\\\":\\\"string\\\",\\\"customerEmail\\\":\\\"user@example.com\\\",\\\"customerAvatar\\\":\\\"string\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/track/customer\")\n  .post(body)\n  .addHeader(\"accept\", \"application/json\")\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"authorization\", \"Bearer MY_TOKEN\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Track a customer for an authenticated workspace."
      tags:
        - "Track"
      security:
        - token: []
      requestBody:
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                "customerId":
                  type: "string"
                  minLength: 1
                  maxLength: 100
                  description: "This is the unique identifier for the customer in the client's app. This is used to track the customer's journey."
                "customerName":
                  type: "string"
                  maxLength: 100
                  description: "Name of the customer in the client's app."
                "customerEmail":
                  type: "string"
                  format: "email"
                  maxLength: 100
                  description: "Email of the customer in the client's app."
                "customerAvatar":
                  type: "string"
                  maxLength: 100
                  description: "Avatar of the customer in the client's app."
              required:
                - "customerId"
      responses:
        "200":
          description: "A customer was tracked."
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "customerId":
                    type: "string"
                  "customerName":
                    type: "string"
                    nullable: true
                  "customerEmail":
                    type: "string"
                    nullable: true
                  "customerAvatar":
                    type: "string"
                    nullable: true
                required:
                  - "customerId"
                  - "customerName"
                  - "customerEmail"
                  - "customerAvatar"
        "400": {"$ref": "#/components/responses/400"}
        "401": {"$ref": "#/components/responses/401"}
        "403": {"$ref": "#/components/responses/403"}
        "404": {"$ref": "#/components/responses/404"}
        "409": {"$ref": "#/components/responses/409"}
        "410": {"$ref": "#/components/responses/410"}
        "422": {"$ref": "#/components/responses/422"}
        "429": {"$ref": "#/components/responses/429"}
        "500": {"$ref": "#/components/responses/500"}
  "/metatags":
    get:
      operationId: "getMetatags"
      x-speakeasy-name-override: "get"
      summary: "Retrieve the metatags for a URL"
      x-codeSamples: [{"lang": "typescript", "label": "getMetatags", "source": "import { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nasync function run() {\n  const result = await dub.metatags.get({\n    url: \"https://dub.co\",\n  });\n\n  // Handle the result\n  console.log(result)\n}\n\nrun();"}, {"lang": "go", "label": "getMetatags", "source": "package main\n\nimport(\n\tdubgo \"github.com/dubinc/dub-go\"\n\t\"github.com/dubinc/dub-go/models/operations\"\n\t\"context\"\n\t\"log\"\n)\n\nfunc main() {\n    s := dubgo.New(\n        dubgo.WithSecurity(\"DUB_API_KEY\"),\n    )\n    request := operations.GetMetatagsRequest{\n        URL: \"https://dub.co\",\n    }\n    ctx := context.Background()\n    res, err := s.Metatags.Get(ctx, request)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res != nil {\n        // handle response\n    }\n}"}, {"lang": "ruby", "label": "getMetatags", "source": "require 'dub'\n\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\n\nreq = ::OpenApiSDK::Operations::GetMetatagsRequest.new(\n  url: \"https://dub.co\",\n)\n    \nres = s.metatags.get(req)\n\nif ! res.object.nil?\n  # handle response\nend"}, {"lang": "php", "label": "getMetatags", "source": "<?php\n\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse \\Dub;\nuse \\Dub\\Models\\Components;\nuse \\Dub\\Models\\Operations;\n\n$security = new Components\\Security();\n$security->token = 'DUB_API_KEY';\n\n$sdk = Dub\\Dub::builder()->setSecurity($security)->build();\n\ntry {\n    \n\n    $response = $sdk->metatags->get('https://dub.co');\n\n    if ($response->object !== null) {\n        // handle response\n    }\n} catch (Throwable $e) {\n    // handle exception\n}"}, {lang: python, label: getMetatags, source: "from dub import Dub\n\ns = Dub(\n    token=\"DUB_API_KEY\",\n)\n\n\nres = s.metatags.get(request={\n    \"url\": \"https://dub.co\",\n})\n\nif res is not None:\n    # handle response\n    pass"}, {"lang": "java", "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.dub.co/metatags\")\n  .get()\n  .addHeader(\"accept\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"}]
      description: "Retrieve the metatags for a URL."
      tags:
        - "Metatags"
      parameters:
        - in: "query"
          name: "url"
          description: "The URL to retrieve metatags for."
          schema:
            type: "string"
            example: "https://dub.co"
            description: "The URL to retrieve metatags for."
          required: true
      responses:
        "200":
          description: "The retrieved metatags"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  "title":
                    type: "string"
                    nullable: true
                    description: "The meta title tag for the URL."
                    example: "Dub.co - Link Management for Modern Marketing Teams"
                  "description":
                    type: "string"
                    nullable: true
                    description: "The meta description tag for the URL."
                    example: "Dub.co is the open-source link management infrastructure ..."
                  "image":
                    type: "string"
                    nullable: true
                    description: "The OpenGraph image for the URL."
                    example: "https://assets.dub.co/thumbnail.jpg"
                required:
                  - "title"
                  - "description"
                  - "image"
components:
  securitySchemes:
    "token":
      type: "http"
      description: "Default authentication mechanism"
      scheme: "bearer"
      x-speakeasy-example: "DUB_API_KEY"
  schemas:
    "LinkSchema":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The unique ID of the short link."
        "domain":
          type: "string"
          description: "The domain of the short link. If not provided, the primary domain for the workspace will be used (or `dub.sh` if the workspace has no domains)."
        "key":
          type: "string"
          description: "The short link slug. If not provided, a random 7-character slug will be generated."
        "externalId":
          type: "string"
          nullable: true
          description: "This is the ID of the link in your database. If set, it can be used to identify the link in the future. Must be prefixed with 'ext_' when passed as a query parameter."
        "url":
          type: "string"
          format: "uri"
          description: "The destination URL of the short link."
        "trackConversion":
          type: "boolean"
          default: false
          description: "[BETA] Whether to track conversions for the short link."
        "archived":
          type: "boolean"
          default: false
          description: "Whether the short link is archived."
        "expiresAt":
          type: "string"
          nullable: true
          description: "The date and time when the short link will expire in ISO-8601 format."
        "expiredUrl":
          type: "string"
          nullable: true
          format: "uri"
          description: "The URL to redirect to when the short link has expired."
        "password":
          type: "string"
          nullable: true
          description: "The password required to access the destination URL of the short link."
        "proxy":
          type: "boolean"
          default: false
          description: "Whether the short link uses Custom Social Media Cards feature."
        "title":
          type: "string"
          nullable: true
          description: "The title of the short link generated via `api.dub.co/metatags`. Will be used for Custom Social Media Cards if `proxy` is true."
        "description":
          type: "string"
          nullable: true
          description: "The description of the short link generated via `api.dub.co/metatags`. Will be used for Custom Social Media Cards if `proxy` is true."
        "image":
          type: "string"
          nullable: true
          description: "The image of the short link generated via `api.dub.co/metatags`. Will be used for Custom Social Media Cards if `proxy` is true."
        "video":
          type: "string"
          nullable: true
          description: "The custom link preview video (og:video). Will be used for Custom Social Media Cards if `proxy` is true. Learn more: https://d.to/og"
        "rewrite":
          type: "boolean"
          default: false
          description: "Whether the short link uses link cloaking."
        "doIndex":
          type: "boolean"
          default: false
          description: "Whether to allow search engines to index the short link."
        "ios":
          type: "string"
          nullable: true
          description: "The iOS destination URL for the short link for iOS device targeting."
        "android":
          type: "string"
          nullable: true
          description: "The Android destination URL for the short link for Android device targeting."
        "geo":
          type: "object"
          nullable: true
          properties:
            "AF":
              type: "string"
              format: "uri"
            "AL":
              type: "string"
              format: "uri"
            "DZ":
              type: "string"
              format: "uri"
            "AS":
              type: "string"
              format: "uri"
            "AD":
              type: "string"
              format: "uri"
            "AO":
              type: "string"
              format: "uri"
            "AI":
              type: "string"
              format: "uri"
            "AQ":
              type: "string"
              format: "uri"
            "AG":
              type: "string"
              format: "uri"
            "AR":
              type: "string"
              format: "uri"
            "AM":
              type: "string"
              format: "uri"
            "AW":
              type: "string"
              format: "uri"
            "AU":
              type: "string"
              format: "uri"
            "AT":
              type: "string"
              format: "uri"
            "AZ":
              type: "string"
              format: "uri"
            "BS":
              type: "string"
              format: "uri"
            "BH":
              type: "string"
              format: "uri"
            "BD":
              type: "string"
              format: "uri"
            "BB":
              type: "string"
              format: "uri"
            "BY":
              type: "string"
              format: "uri"
            "BE":
              type: "string"
              format: "uri"
            "BZ":
              type: "string"
              format: "uri"
            "BJ":
              type: "string"
              format: "uri"
            "BM":
              type: "string"
              format: "uri"
            "BT":
              type: "string"
              format: "uri"
            "BO":
              type: "string"
              format: "uri"
            "BA":
              type: "string"
              format: "uri"
            "BW":
              type: "string"
              format: "uri"
            "BV":
              type: "string"
              format: "uri"
            "BR":
              type: "string"
              format: "uri"
            "IO":
              type: "string"
              format: "uri"
            "BN":
              type: "string"
              format: "uri"
            "BG":
              type: "string"
              format: "uri"
            "BF":
              type: "string"
              format: "uri"
            "BI":
              type: "string"
              format: "uri"
            "KH":
              type: "string"
              format: "uri"
            "CM":
              type: "string"
              format: "uri"
            "CA":
              type: "string"
              format: "uri"
            "CV":
              type: "string"
              format: "uri"
            "KY":
              type: "string"
              format: "uri"
            "CF":
              type: "string"
              format: "uri"
            "TD":
              type: "string"
              format: "uri"
            "CL":
              type: "string"
              format: "uri"
            "CN":
              type: "string"
              format: "uri"
            "CX":
              type: "string"
              format: "uri"
            "CC":
              type: "string"
              format: "uri"
            "CO":
              type: "string"
              format: "uri"
            "KM":
              type: "string"
              format: "uri"
            "CG":
              type: "string"
              format: "uri"
            "CD":
              type: "string"
              format: "uri"
            "CK":
              type: "string"
              format: "uri"
            "CR":
              type: "string"
              format: "uri"
            "CI":
              type: "string"
              format: "uri"
            "HR":
              type: "string"
              format: "uri"
            "CU":
              type: "string"
              format: "uri"
            "CY":
              type: "string"
              format: "uri"
            "CZ":
              type: "string"
              format: "uri"
            "DK":
              type: "string"
              format: "uri"
            "DJ":
              type: "string"
              format: "uri"
            "DM":
              type: "string"
              format: "uri"
            "DO":
              type: "string"
              format: "uri"
            "EC":
              type: "string"
              format: "uri"
            "EG":
              type: "string"
              format: "uri"
            "SV":
              type: "string"
              format: "uri"
            "GQ":
              type: "string"
              format: "uri"
            "ER":
              type: "string"
              format: "uri"
            "EE":
              type: "string"
              format: "uri"
            "ET":
              type: "string"
              format: "uri"
            "FK":
              type: "string"
              format: "uri"
            "FO":
              type: "string"
              format: "uri"
            "FJ":
              type: "string"
              format: "uri"
            "FI":
              type: "string"
              format: "uri"
            "FR":
              type: "string"
              format: "uri"
            "GF":
              type: "string"
              format: "uri"
            "PF":
              type: "string"
              format: "uri"
            "TF":
              type: "string"
              format: "uri"
            "GA":
              type: "string"
              format: "uri"
            "GM":
              type: "string"
              format: "uri"
            "GE":
              type: "string"
              format: "uri"
            "DE":
              type: "string"
              format: "uri"
            "GH":
              type: "string"
              format: "uri"
            "GI":
              type: "string"
              format: "uri"
            "GR":
              type: "string"
              format: "uri"
            "GL":
              type: "string"
              format: "uri"
            "GD":
              type: "string"
              format: "uri"
            "GP":
              type: "string"
              format: "uri"
            "GU":
              type: "string"
              format: "uri"
            "GT":
              type: "string"
              format: "uri"
            "GN":
              type: "string"
              format: "uri"
            "GW":
              type: "string"
              format: "uri"
            "GY":
              type: "string"
              format: "uri"
            "HT":
              type: "string"
              format: "uri"
            "HM":
              type: "string"
              format: "uri"
            "VA":
              type: "string"
              format: "uri"
            "HN":
              type: "string"
              format: "uri"
            "HK":
              type: "string"
              format: "uri"
            "HU":
              type: "string"
              format: "uri"
            "IS":
              type: "string"
              format: "uri"
            "IN":
              type: "string"
              format: "uri"
            "ID":
              type: "string"
              format: "uri"
            "IR":
              type: "string"
              format: "uri"
            "IQ":
              type: "string"
              format: "uri"
            "IE":
              type: "string"
              format: "uri"
            "IL":
              type: "string"
              format: "uri"
            "IT":
              type: "string"
              format: "uri"
            "JM":
              type: "string"
              format: "uri"
            "JP":
              type: "string"
              format: "uri"
            "JO":
              type: "string"
              format: "uri"
            "KZ":
              type: "string"
              format: "uri"
            "KE":
              type: "string"
              format: "uri"
            "KI":
              type: "string"
              format: "uri"
            "KP":
              type: "string"
              format: "uri"
            "KR":
              type: "string"
              format: "uri"
            "KW":
              type: "string"
              format: "uri"
            "KG":
              type: "string"
              format: "uri"
            "LA":
              type: "string"
              format: "uri"
            "LV":
              type: "string"
              format: "uri"
            "LB":
              type: "string"
              format: "uri"
            "LS":
              type: "string"
              format: "uri"
            "LR":
              type: "string"
              format: "uri"
            "LY":
              type: "string"
              format: "uri"
            "LI":
              type: "string"
              format: "uri"
            "LT":
              type: "string"
              format: "uri"
            "LU":
              type: "string"
              format: "uri"
            "MO":
              type: "string"
              format: "uri"
            "MG":
              type: "string"
              format: "uri"
            "MW":
              type: "string"
              format: "uri"
            "MY":
              type: "string"
              format: "uri"
            "MV":
              type: "string"
              format: "uri"
            "ML":
              type: "string"
              format: "uri"
            "MT":
              type: "string"
              format: "uri"
            "MH":
              type: "string"
              format: "uri"
            "MQ":
              type: "string"
              format: "uri"
            "MR":
              type: "string"
              format: "uri"
            "MU":
              type: "string"
              format: "uri"
            "YT":
              type: "string"
              format: "uri"
            "MX":
              type: "string"
              format: "uri"
            "FM":
              type: "string"
              format: "uri"
            "MD":
              type: "string"
              format: "uri"
            "MC":
              type: "string"
              format: "uri"
            "MN":
              type: "string"
              format: "uri"
            "MS":
              type: "string"
              format: "uri"
            "MA":
              type: "string"
              format: "uri"
            "MZ":
              type: "string"
              format: "uri"
            "MM":
              type: "string"
              format: "uri"
            "NA":
              type: "string"
              format: "uri"
            "NR":
              type: "string"
              format: "uri"
            "NP":
              type: "string"
              format: "uri"
            "NL":
              type: "string"
              format: "uri"
            "NC":
              type: "string"
              format: "uri"
            "NZ":
              type: "string"
              format: "uri"
            "NI":
              type: "string"
              format: "uri"
            "NE":
              type: "string"
              format: "uri"
            "NG":
              type: "string"
              format: "uri"
            "NU":
              type: "string"
              format: "uri"
            "NF":
              type: "string"
              format: "uri"
            "MK":
              type: "string"
              format: "uri"
            "MP":
              type: "string"
              format: "uri"
            "NO":
              type: "string"
              format: "uri"
            "OM":
              type: "string"
              format: "uri"
            "PK":
              type: "string"
              format: "uri"
            "PW":
              type: "string"
              format: "uri"
            "PS":
              type: "string"
              format: "uri"
            "PA":
              type: "string"
              format: "uri"
            "PG":
              type: "string"
              format: "uri"
            "PY":
              type: "string"
              format: "uri"
            "PE":
              type: "string"
              format: "uri"
            "PH":
              type: "string"
              format: "uri"
            "PN":
              type: "string"
              format: "uri"
            "PL":
              type: "string"
              format: "uri"
            "PT":
              type: "string"
              format: "uri"
            "PR":
              type: "string"
              format: "uri"
            "QA":
              type: "string"
              format: "uri"
            "RE":
              type: "string"
              format: "uri"
            "RO":
              type: "string"
              format: "uri"
            "RU":
              type: "string"
              format: "uri"
            "RW":
              type: "string"
              format: "uri"
            "SH":
              type: "string"
              format: "uri"
            "KN":
              type: "string"
              format: "uri"
            "LC":
              type: "string"
              format: "uri"
            "PM":
              type: "string"
              format: "uri"
            "VC":
              type: "string"
              format: "uri"
            "WS":
              type: "string"
              format: "uri"
            "SM":
              type: "string"
              format: "uri"
            "ST":
              type: "string"
              format: "uri"
            "SA":
              type: "string"
              format: "uri"
            "SN":
              type: "string"
              format: "uri"
            "SC":
              type: "string"
              format: "uri"
            "SL":
              type: "string"
              format: "uri"
            "SG":
              type: "string"
              format: "uri"
            "SK":
              type: "string"
              format: "uri"
            "SI":
              type: "string"
              format: "uri"
            "SB":
              type: "string"
              format: "uri"
            "SO":
              type: "string"
              format: "uri"
            "ZA":
              type: "string"
              format: "uri"
            "GS":
              type: "string"
              format: "uri"
            "ES":
              type: "string"
              format: "uri"
            "LK":
              type: "string"
              format: "uri"
            "SD":
              type: "string"
              format: "uri"
            "SR":
              type: "string"
              format: "uri"
            "SJ":
              type: "string"
              format: "uri"
            "SZ":
              type: "string"
              format: "uri"
            "SE":
              type: "string"
              format: "uri"
            "CH":
              type: "string"
              format: "uri"
            "SY":
              type: "string"
              format: "uri"
            "TW":
              type: "string"
              format: "uri"
            "TJ":
              type: "string"
              format: "uri"
            "TZ":
              type: "string"
              format: "uri"
            "TH":
              type: "string"
              format: "uri"
            "TL":
              type: "string"
              format: "uri"
            "TG":
              type: "string"
              format: "uri"
            "TK":
              type: "string"
              format: "uri"
            "TO":
              type: "string"
              format: "uri"
            "TT":
              type: "string"
              format: "uri"
            "TN":
              type: "string"
              format: "uri"
            "TR":
              type: "string"
              format: "uri"
            "TM":
              type: "string"
              format: "uri"
            "TC":
              type: "string"
              format: "uri"
            "TV":
              type: "string"
              format: "uri"
            "UG":
              type: "string"
              format: "uri"
            "UA":
              type: "string"
              format: "uri"
            "AE":
              type: "string"
              format: "uri"
            "GB":
              type: "string"
              format: "uri"
            "US":
              type: "string"
              format: "uri"
            "UM":
              type: "string"
              format: "uri"
            "UY":
              type: "string"
              format: "uri"
            "UZ":
              type: "string"
              format: "uri"
            "VU":
              type: "string"
              format: "uri"
            "VE":
              type: "string"
              format: "uri"
            "VN":
              type: "string"
              format: "uri"
            "VG":
              type: "string"
              format: "uri"
            "VI":
              type: "string"
              format: "uri"
            "WF":
              type: "string"
              format: "uri"
            "EH":
              type: "string"
              format: "uri"
            "YE":
              type: "string"
              format: "uri"
            "ZM":
              type: "string"
              format: "uri"
            "ZW":
              type: "string"
              format: "uri"
            "AX":
              type: "string"
              format: "uri"
            "BQ":
              type: "string"
              format: "uri"
            "CW":
              type: "string"
              format: "uri"
            "GG":
              type: "string"
              format: "uri"
            "IM":
              type: "string"
              format: "uri"
            "JE":
              type: "string"
              format: "uri"
            "ME":
              type: "string"
              format: "uri"
            "BL":
              type: "string"
              format: "uri"
            "MF":
              type: "string"
              format: "uri"
            "RS":
              type: "string"
              format: "uri"
            "SX":
              type: "string"
              format: "uri"
            "SS":
              type: "string"
              format: "uri"
            "XK":
              type: "string"
              format: "uri"
          additionalProperties: false
          description: "Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`. Learn more: https://d.to/geo"
        "publicStats":
          type: "boolean"
          default: false
          description: "Whether the short link's stats are publicly accessible."
        "tagId":
          type: "string"
          nullable: true
          description: "The unique ID of the tag assigned to the short link. This field is deprecated – use `tags` instead."
          deprecated: true
        "tags":
          type: "array"
          nullable: true
          items: {"$ref": "#/components/schemas/TagSchema"}
          description: "The tags assigned to the short link."
        "comments":
          type: "string"
          nullable: true
          description: "The comments for the short link."
        "shortLink":
          type: "string"
          format: "uri"
          description: "The full URL of the short link, including the https protocol (e.g. `https://dub.sh/try`)."
        "qrCode":
          type: "string"
          format: "uri"
          description: "The full URL of the QR code for the short link (e.g. `https://api.dub.co/qr?url=https://dub.sh/try`)."
        "utm_source":
          type: "string"
          nullable: true
          description: "The UTM source of the short link."
        "utm_medium":
          type: "string"
          nullable: true
          description: "The UTM medium of the short link."
        "utm_campaign":
          type: "string"
          nullable: true
          description: "The UTM campaign of the short link."
        "utm_term":
          type: "string"
          nullable: true
          description: "The UTM term of the short link."
        "utm_content":
          type: "string"
          nullable: true
          description: "The UTM content of the short link."
        "userId":
          type: "string"
          description: "The user ID of the creator of the short link."
        "workspaceId":
          type: "string"
          description: "The workspace ID of the short link."
        "clicks":
          type: "number"
          default: 0
          description: "The number of clicks on the short link."
        "lastClicked":
          type: "string"
          nullable: true
          description: "The date and time when the short link was last clicked."
        "leads":
          type: "number"
          default: 0
          description: "[BETA]: The number of leads the short links has generated."
        "sales":
          type: "number"
          default: 0
          description: "[BETA]: The number of sales the short links has generated."
        "createdAt":
          type: "string"
          description: "The date and time when the short link was created."
        "updatedAt":
          type: "string"
          description: "The date and time when the short link was last updated."
        "projectId":
          type: "string"
          description: "The project ID of the short link. This field is deprecated – use `workspaceId` instead."
          deprecated: true
      required:
        - "id"
        - "domain"
        - "key"
        - "externalId"
        - "url"
        - "trackConversion"
        - "archived"
        - "expiresAt"
        - "expiredUrl"
        - "password"
        - "proxy"
        - "title"
        - "description"
        - "image"
        - "video"
        - "rewrite"
        - "doIndex"
        - "ios"
        - "android"
        - "geo"
        - "publicStats"
        - "tagId"
        - "tags"
        - "comments"
        - "shortLink"
        - "qrCode"
        - "utm_source"
        - "utm_medium"
        - "utm_campaign"
        - "utm_term"
        - "utm_content"
        - "userId"
        - "workspaceId"
        - "clicks"
        - "lastClicked"
        - "leads"
        - "sales"
        - "createdAt"
        - "updatedAt"
        - "projectId"
      title: "Link"
    "WorkspaceSchema":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The unique ID of the workspace."
        "name":
          type: "string"
          description: "The name of the workspace."
        "slug":
          type: "string"
          description: "The slug of the workspace."
        "logo":
          type: "string"
          nullable: true
          default: null
          description: "The logo of the workspace."
        "usage":
          type: "number"
          description: "The usage of the workspace."
        "usageLimit":
          type: "number"
          description: "The usage limit of the workspace."
        "linksUsage":
          type: "number"
          description: "The links usage of the workspace."
        "linksLimit":
          type: "number"
          description: "The links limit of the workspace."
        "domainsLimit":
          type: "number"
          description: "The domains limit of the workspace."
        "tagsLimit":
          type: "number"
          description: "The tags limit of the workspace."
        "usersLimit":
          type: "number"
          description: "The users limit of the workspace."
        "plan":
          type: "string"
          enum:
            - "free"
            - "pro"
            - "business"
            - "business plus"
            - "business extra"
            - "business max"
            - "enterprise"
          description: "The plan of the workspace."
        "stripeId":
          type: "string"
          nullable: true
          description: "The Stripe ID of the workspace."
        "billingCycleStart":
          type: "number"
          description: "The date and time when the billing cycle starts for the workspace."
        "stripeConnectId":
          type: "string"
          nullable: true
          description: "[BETA]: The Stripe Connect ID of the workspace."
        "createdAt":
          type: "string"
          description: "The date and time when the workspace was created."
        "users":
          type: "array"
          items:
            type: "object"
            properties:
              "role":
                type: "string"
                enum:
                  - "owner"
                  - "member"
                description: "The role of the authenticated user in the workspace."
            required:
              - "role"
          description: "The role of the authenticated user in the workspace."
        "domains":
          type: "array"
          items:
            type: "object"
            properties:
              "slug":
                type: "string"
                description: "The domain name."
                example: "acme.com"
              "primary":
                type: "boolean"
                default: false
                description: "Whether the domain is the primary domain for the workspace."
              "verified":
                type: "boolean"
                default: false
                description: "Whether the domain is verified."
            required:
              - "slug"
              - "primary"
              - "verified"
          description: "The domains of the workspace."
        "inviteCode":
          type: "string"
          nullable: true
          description: "The invite code of the workspace."
        "flags":
          type: "object"
          additionalProperties:
            type: "boolean"
          description: "The feature flags of the workspace, indicating which features are enabled."
      required:
        - "id"
        - "name"
        - "slug"
        - "logo"
        - "usage"
        - "usageLimit"
        - "linksUsage"
        - "linksLimit"
        - "domainsLimit"
        - "tagsLimit"
        - "usersLimit"
        - "plan"
        - "stripeId"
        - "billingCycleStart"
        - "stripeConnectId"
        - "createdAt"
        - "users"
        - "domains"
        - "inviteCode"
      title: "Workspace"
    "TagSchema":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The unique ID of the tag."
        "name":
          type: "string"
          description: "The name of the tag."
        "color":
          type: "string"
          enum:
            - "red"
            - "yellow"
            - "green"
            - "blue"
            - "purple"
            - "pink"
            - "brown"
          description: "The color of the tag."
      required:
        - "id"
        - "name"
        - "color"
      title: "Tag"
    "DomainSchema":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The unique identifier of the domain."
        "slug":
          type: "string"
          description: "The domain name."
          example: "acme.com"
        "verified":
          type: "boolean"
          default: false
          description: "Whether the domain is verified."
        "primary":
          type: "boolean"
          default: false
          description: "Whether the domain is the primary domain for the workspace."
        "archived":
          type: "boolean"
          description: "Whether the domain is archived."
          default: false
        "placeholder":
          type: "string"
          description: "Provide context to your teammates in the link creation modal by showing them an example of a link to be shortened."
          default: "https://dub.co/help/article/what-is-dub"
          example: "https://dub.co/help/article/what-is-dub"
        "expiredUrl":
          type: "string"
          nullable: true
          description: "The URL to redirect to when a link under this domain has expired."
          example: "https://acme.com/expired"
        "createdAt":
          type: "string"
          description: "The date the domain was created."
        "updatedAt":
          type: "string"
          description: "The date the domain was last updated."
      required:
        - "id"
        - "slug"
        - "verified"
        - "primary"
        - "archived"
        - "placeholder"
        - "expiredUrl"
        - "createdAt"
        - "updatedAt"
    "linkGeoTargeting":
      type: "object"
      nullable: true
      properties:
        "AF":
          type: "string"
        "AL":
          type: "string"
        "DZ":
          type: "string"
        "AS":
          type: "string"
        "AD":
          type: "string"
        "AO":
          type: "string"
        "AI":
          type: "string"
        "AQ":
          type: "string"
        "AG":
          type: "string"
        "AR":
          type: "string"
        "AM":
          type: "string"
        "AW":
          type: "string"
        "AU":
          type: "string"
        "AT":
          type: "string"
        "AZ":
          type: "string"
        "BS":
          type: "string"
        "BH":
          type: "string"
        "BD":
          type: "string"
        "BB":
          type: "string"
        "BY":
          type: "string"
        "BE":
          type: "string"
        "BZ":
          type: "string"
        "BJ":
          type: "string"
        "BM":
          type: "string"
        "BT":
          type: "string"
        "BO":
          type: "string"
        "BA":
          type: "string"
        "BW":
          type: "string"
        "BV":
          type: "string"
        "BR":
          type: "string"
        "IO":
          type: "string"
        "BN":
          type: "string"
        "BG":
          type: "string"
        "BF":
          type: "string"
        "BI":
          type: "string"
        "KH":
          type: "string"
        "CM":
          type: "string"
        "CA":
          type: "string"
        "CV":
          type: "string"
        "KY":
          type: "string"
        "CF":
          type: "string"
        "TD":
          type: "string"
        "CL":
          type: "string"
        "CN":
          type: "string"
        "CX":
          type: "string"
        "CC":
          type: "string"
        "CO":
          type: "string"
        "KM":
          type: "string"
        "CG":
          type: "string"
        "CD":
          type: "string"
        "CK":
          type: "string"
        "CR":
          type: "string"
        "CI":
          type: "string"
        "HR":
          type: "string"
        "CU":
          type: "string"
        "CY":
          type: "string"
        "CZ":
          type: "string"
        "DK":
          type: "string"
        "DJ":
          type: "string"
        "DM":
          type: "string"
        "DO":
          type: "string"
        "EC":
          type: "string"
        "EG":
          type: "string"
        "SV":
          type: "string"
        "GQ":
          type: "string"
        "ER":
          type: "string"
        "EE":
          type: "string"
        "ET":
          type: "string"
        "FK":
          type: "string"
        "FO":
          type: "string"
        "FJ":
          type: "string"
        "FI":
          type: "string"
        "FR":
          type: "string"
        "GF":
          type: "string"
        "PF":
          type: "string"
        "TF":
          type: "string"
        "GA":
          type: "string"
        "GM":
          type: "string"
        "GE":
          type: "string"
        "DE":
          type: "string"
        "GH":
          type: "string"
        "GI":
          type: "string"
        "GR":
          type: "string"
        "GL":
          type: "string"
        "GD":
          type: "string"
        "GP":
          type: "string"
        "GU":
          type: "string"
        "GT":
          type: "string"
        "GN":
          type: "string"
        "GW":
          type: "string"
        "GY":
          type: "string"
        "HT":
          type: "string"
        "HM":
          type: "string"
        "VA":
          type: "string"
        "HN":
          type: "string"
        "HK":
          type: "string"
        "HU":
          type: "string"
        "IS":
          type: "string"
        "IN":
          type: "string"
        "ID":
          type: "string"
        "IR":
          type: "string"
        "IQ":
          type: "string"
        "IE":
          type: "string"
        "IL":
          type: "string"
        "IT":
          type: "string"
        "JM":
          type: "string"
        "JP":
          type: "string"
        "JO":
          type: "string"
        "KZ":
          type: "string"
        "KE":
          type: "string"
        "KI":
          type: "string"
        "KP":
          type: "string"
        "KR":
          type: "string"
        "KW":
          type: "string"
        "KG":
          type: "string"
        "LA":
          type: "string"
        "LV":
          type: "string"
        "LB":
          type: "string"
        "LS":
          type: "string"
        "LR":
          type: "string"
        "LY":
          type: "string"
        "LI":
          type: "string"
        "LT":
          type: "string"
        "LU":
          type: "string"
        "MO":
          type: "string"
        "MG":
          type: "string"
        "MW":
          type: "string"
        "MY":
          type: "string"
        "MV":
          type: "string"
        "ML":
          type: "string"
        "MT":
          type: "string"
        "MH":
          type: "string"
        "MQ":
          type: "string"
        "MR":
          type: "string"
        "MU":
          type: "string"
        "YT":
          type: "string"
        "MX":
          type: "string"
        "FM":
          type: "string"
        "MD":
          type: "string"
        "MC":
          type: "string"
        "MN":
          type: "string"
        "MS":
          type: "string"
        "MA":
          type: "string"
        "MZ":
          type: "string"
        "MM":
          type: "string"
        "NA":
          type: "string"
        "NR":
          type: "string"
        "NP":
          type: "string"
        "NL":
          type: "string"
        "NC":
          type: "string"
        "NZ":
          type: "string"
        "NI":
          type: "string"
        "NE":
          type: "string"
        "NG":
          type: "string"
        "NU":
          type: "string"
        "NF":
          type: "string"
        "MK":
          type: "string"
        "MP":
          type: "string"
        "NO":
          type: "string"
        "OM":
          type: "string"
        "PK":
          type: "string"
        "PW":
          type: "string"
        "PS":
          type: "string"
        "PA":
          type: "string"
        "PG":
          type: "string"
        "PY":
          type: "string"
        "PE":
          type: "string"
        "PH":
          type: "string"
        "PN":
          type: "string"
        "PL":
          type: "string"
        "PT":
          type: "string"
        "PR":
          type: "string"
        "QA":
          type: "string"
        "RE":
          type: "string"
        "RO":
          type: "string"
        "RU":
          type: "string"
        "RW":
          type: "string"
        "SH":
          type: "string"
        "KN":
          type: "string"
        "LC":
          type: "string"
        "PM":
          type: "string"
        "VC":
          type: "string"
        "WS":
          type: "string"
        "SM":
          type: "string"
        "ST":
          type: "string"
        "SA":
          type: "string"
        "SN":
          type: "string"
        "SC":
          type: "string"
        "SL":
          type: "string"
        "SG":
          type: "string"
        "SK":
          type: "string"
        "SI":
          type: "string"
        "SB":
          type: "string"
        "SO":
          type: "string"
        "ZA":
          type: "string"
        "GS":
          type: "string"
        "ES":
          type: "string"
        "LK":
          type: "string"
        "SD":
          type: "string"
        "SR":
          type: "string"
        "SJ":
          type: "string"
        "SZ":
          type: "string"
        "SE":
          type: "string"
        "CH":
          type: "string"
        "SY":
          type: "string"
        "TW":
          type: "string"
        "TJ":
          type: "string"
        "TZ":
          type: "string"
        "TH":
          type: "string"
        "TL":
          type: "string"
        "TG":
          type: "string"
        "TK":
          type: "string"
        "TO":
          type: "string"
        "TT":
          type: "string"
        "TN":
          type: "string"
        "TR":
          type: "string"
        "TM":
          type: "string"
        "TC":
          type: "string"
        "TV":
          type: "string"
        "UG":
          type: "string"
        "UA":
          type: "string"
        "AE":
          type: "string"
        "GB":
          type: "string"
        "US":
          type: "string"
        "UM":
          type: "string"
        "UY":
          type: "string"
        "UZ":
          type: "string"
        "VU":
          type: "string"
        "VE":
          type: "string"
        "VN":
          type: "string"
        "VG":
          type: "string"
        "VI":
          type: "string"
        "WF":
          type: "string"
        "EH":
          type: "string"
        "YE":
          type: "string"
        "ZM":
          type: "string"
        "ZW":
          type: "string"
        "AX":
          type: "string"
        "BQ":
          type: "string"
        "CW":
          type: "string"
        "GG":
          type: "string"
        "IM":
          type: "string"
        "JE":
          type: "string"
        "ME":
          type: "string"
        "BL":
          type: "string"
        "MF":
          type: "string"
        "RS":
          type: "string"
        "SX":
          type: "string"
        "SS":
          type: "string"
        "XK":
          type: "string"
      additionalProperties: false
      description: "Geo targeting information for the short link in JSON format `{[COUNTRY]: https://example.com }`."
    "countryCode":
      type: "string"
      enum:
        - "AF"
        - "AL"
        - "DZ"
        - "AS"
        - "AD"
        - "AO"
        - "AI"
        - "AQ"
        - "AG"
        - "AR"
        - "AM"
        - "AW"
        - "AU"
        - "AT"
        - "AZ"
        - "BS"
        - "BH"
        - "BD"
        - "BB"
        - "BY"
        - "BE"
        - "BZ"
        - "BJ"
        - "BM"
        - "BT"
        - "BO"
        - "BA"
        - "BW"
        - "BV"
        - "BR"
        - "IO"
        - "BN"
        - "BG"
        - "BF"
        - "BI"
        - "KH"
        - "CM"
        - "CA"
        - "CV"
        - "KY"
        - "CF"
        - "TD"
        - "CL"
        - "CN"
        - "CX"
        - "CC"
        - "CO"
        - "KM"
        - "CG"
        - "CD"
        - "CK"
        - "CR"
        - "CI"
        - "HR"
        - "CU"
        - "CY"
        - "CZ"
        - "DK"
        - "DJ"
        - "DM"
        - "DO"
        - "EC"
        - "EG"
        - "SV"
        - "GQ"
        - "ER"
        - "EE"
        - "ET"
        - "FK"
        - "FO"
        - "FJ"
        - "FI"
        - "FR"
        - "GF"
        - "PF"
        - "TF"
        - "GA"
        - "GM"
        - "GE"
        - "DE"
        - "GH"
        - "GI"
        - "GR"
        - "GL"
        - "GD"
        - "GP"
        - "GU"
        - "GT"
        - "GN"
        - "GW"
        - "GY"
        - "HT"
        - "HM"
        - "VA"
        - "HN"
        - "HK"
        - "HU"
        - "IS"
        - "IN"
        - "ID"
        - "IR"
        - "IQ"
        - "IE"
        - "IL"
        - "IT"
        - "JM"
        - "JP"
        - "JO"
        - "KZ"
        - "KE"
        - "KI"
        - "KP"
        - "KR"
        - "KW"
        - "KG"
        - "LA"
        - "LV"
        - "LB"
        - "LS"
        - "LR"
        - "LY"
        - "LI"
        - "LT"
        - "LU"
        - "MO"
        - "MG"
        - "MW"
        - "MY"
        - "MV"
        - "ML"
        - "MT"
        - "MH"
        - "MQ"
        - "MR"
        - "MU"
        - "YT"
        - "MX"
        - "FM"
        - "MD"
        - "MC"
        - "MN"
        - "MS"
        - "MA"
        - "MZ"
        - "MM"
        - "NA"
        - "NR"
        - "NP"
        - "NL"
        - "NC"
        - "NZ"
        - "NI"
        - "NE"
        - "NG"
        - "NU"
        - "NF"
        - "MK"
        - "MP"
        - "NO"
        - "OM"
        - "PK"
        - "PW"
        - "PS"
        - "PA"
        - "PG"
        - "PY"
        - "PE"
        - "PH"
        - "PN"
        - "PL"
        - "PT"
        - "PR"
        - "QA"
        - "RE"
        - "RO"
        - "RU"
        - "RW"
        - "SH"
        - "KN"
        - "LC"
        - "PM"
        - "VC"
        - "WS"
        - "SM"
        - "ST"
        - "SA"
        - "SN"
        - "SC"
        - "SL"
        - "SG"
        - "SK"
        - "SI"
        - "SB"
        - "SO"
        - "ZA"
        - "GS"
        - "ES"
        - "LK"
        - "SD"
        - "SR"
        - "SJ"
        - "SZ"
        - "SE"
        - "CH"
        - "SY"
        - "TW"
        - "TJ"
        - "TZ"
        - "TH"
        - "TL"
        - "TG"
        - "TK"
        - "TO"
        - "TT"
        - "TN"
        - "TR"
        - "TM"
        - "TC"
        - "TV"
        - "UG"
        - "UA"
        - "AE"
        - "GB"
        - "US"
        - "UM"
        - "UY"
        - "UZ"
        - "VU"
        - "VE"
        - "VN"
        - "VG"
        - "VI"
        - "WF"
        - "EH"
        - "YE"
        - "ZM"
        - "ZW"
        - "AX"
        - "BQ"
        - "CW"
        - "GG"
        - "IM"
        - "JE"
        - "ME"
        - "BL"
        - "MF"
        - "RS"
        - "SX"
        - "SS"
        - "XK"
      description: "The country to retrieve analytics for."
    "ClicksCount":
      type: "object"
      properties:
        "clicks":
          type: "number"
          description: "The total number of clicks"
      required:
        - "clicks"
      title: "ClicksCount"
    "ClicksTimeseries":
      type: "object"
      properties:
        "start":
          type: "string"
          description: "The starting timestamp of the interval"
        "clicks":
          type: "number"
          description: "The number of clicks in the interval"
      required:
        - "start"
        - "clicks"
    "ClicksCountries":
      type: "object"
      properties:
        "country":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "CI"
            - "HR"
            - "CU"
            - "CY"
            - "CZ"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MK"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RE"
            - "RO"
            - "RU"
            - "RW"
            - "SH"
            - "KN"
            - "LC"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "SC"
            - "SL"
            - "SG"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "AX"
            - "BQ"
            - "CW"
            - "GG"
            - "IM"
            - "JE"
            - "ME"
            - "BL"
            - "MF"
            - "RS"
            - "SX"
            - "SS"
            - "XK"
          description: "The 2-letter country code: https://d.to/geo"
        "clicks":
          type: "number"
          description: "The number of clicks from this country"
      required:
        - "country"
        - "clicks"
    "ClicksCities":
      type: "object"
      properties:
        "city":
          type: "string"
          description: "The name of the city"
        "country":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "CI"
            - "HR"
            - "CU"
            - "CY"
            - "CZ"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MK"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RE"
            - "RO"
            - "RU"
            - "RW"
            - "SH"
            - "KN"
            - "LC"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "SC"
            - "SL"
            - "SG"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "AX"
            - "BQ"
            - "CW"
            - "GG"
            - "IM"
            - "JE"
            - "ME"
            - "BL"
            - "MF"
            - "RS"
            - "SX"
            - "SS"
            - "XK"
          description: "The 2-letter country code of the city: https://d.to/geo"
        "clicks":
          type: "number"
          description: "The number of clicks from this city"
      required:
        - "city"
        - "country"
        - "clicks"
    "ClicksDevices":
      type: "object"
      properties:
        "device":
          type: "string"
          description: "The name of the device"
        "clicks":
          type: "number"
          description: "The number of clicks from this device"
      required:
        - "device"
        - "clicks"
    "ClicksBrowsers":
      type: "object"
      properties:
        "browser":
          type: "string"
          description: "The name of the browser"
        "clicks":
          type: "number"
          description: "The number of clicks from this browser"
      required:
        - "browser"
        - "clicks"
    "ClicksOS":
      type: "object"
      properties:
        "os":
          type: "string"
          description: "The name of the OS"
        "clicks":
          type: "number"
          description: "The number of clicks from this OS"
      required:
        - "os"
        - "clicks"
    "ClicksReferers":
      type: "object"
      properties:
        "referer":
          type: "string"
          description: "The name of the referer. If unknown, this will be `(direct)`"
        "clicks":
          type: "number"
          description: "The number of clicks from this referer"
      required:
        - "referer"
        - "clicks"
    "ClicksTopLinks":
      type: "object"
      properties:
        "link":
          type: "string"
          description: "The unique ID of the short link"
          deprecated: true
        "id":
          type: "string"
          description: "The unique ID of the short link"
        "domain":
          type: "string"
          description: "The domain of the short link"
        "key":
          type: "string"
          description: "The key of the short link"
        "shortLink":
          type: "string"
          description: "The short link URL"
        "url":
          type: "string"
          description: "The destination URL of the short link"
        "createdAt":
          type: "string"
          description: "The creation timestamp of the short link"
        "clicks":
          type: "number"
          description: "The number of clicks from this link"
      required:
        - "link"
        - "id"
        - "domain"
        - "key"
        - "shortLink"
        - "url"
        - "createdAt"
        - "clicks"
    "ClicksTopUrls":
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The destination URL"
        "clicks":
          type: "number"
          description: "The number of clicks from this URL"
      required:
        - "url"
        - "clicks"
    "LeadsCount":
      type: "object"
      properties:
        "leads":
          type: "number"
          description: "The total number of leads"
      required:
        - "leads"
      title: "LeadsCount"
    "LeadsTimeseries":
      type: "object"
      properties:
        "start":
          type: "string"
          description: "The starting timestamp of the interval"
        "leads":
          type: "number"
          description: "The number of leads in the interval"
      required:
        - "start"
        - "leads"
    "LeadsCountries":
      type: "object"
      properties:
        "country":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "CI"
            - "HR"
            - "CU"
            - "CY"
            - "CZ"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MK"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RE"
            - "RO"
            - "RU"
            - "RW"
            - "SH"
            - "KN"
            - "LC"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "SC"
            - "SL"
            - "SG"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "AX"
            - "BQ"
            - "CW"
            - "GG"
            - "IM"
            - "JE"
            - "ME"
            - "BL"
            - "MF"
            - "RS"
            - "SX"
            - "SS"
            - "XK"
          description: "The 2-letter country code: https://d.to/geo"
        "leads":
          type: "number"
          description: "The number of leads from this country"
      required:
        - "country"
        - "leads"
    "LeadsCities":
      type: "object"
      properties:
        "city":
          type: "string"
          description: "The name of the city"
        "country":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "CI"
            - "HR"
            - "CU"
            - "CY"
            - "CZ"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MK"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RE"
            - "RO"
            - "RU"
            - "RW"
            - "SH"
            - "KN"
            - "LC"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "SC"
            - "SL"
            - "SG"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "AX"
            - "BQ"
            - "CW"
            - "GG"
            - "IM"
            - "JE"
            - "ME"
            - "BL"
            - "MF"
            - "RS"
            - "SX"
            - "SS"
            - "XK"
          description: "The 2-letter country code of the city: https://d.to/geo"
        "leads":
          type: "number"
          description: "The number of leads from this city"
      required:
        - "city"
        - "country"
        - "leads"
    "LeadsDevices":
      type: "object"
      properties:
        "device":
          type: "string"
          description: "The name of the device"
        "leads":
          type: "number"
          description: "The number of leads from this device"
      required:
        - "device"
        - "leads"
    "LeadsBrowsers":
      type: "object"
      properties:
        "browser":
          type: "string"
          description: "The name of the browser"
        "leads":
          type: "number"
          description: "The number of leads from this browser"
      required:
        - "browser"
        - "leads"
    "LeadsOS":
      type: "object"
      properties:
        "os":
          type: "string"
          description: "The name of the OS"
        "leads":
          type: "number"
          description: "The number of leads from this OS"
      required:
        - "os"
        - "leads"
    "LeadsReferers":
      type: "object"
      properties:
        "referer":
          type: "string"
          description: "The name of the referer. If unknown, this will be `(direct)`"
        "leads":
          type: "number"
          description: "The number of leads from this referer"
      required:
        - "referer"
        - "leads"
    "LeadsTopLinks":
      type: "object"
      properties:
        "link":
          type: "string"
          description: "The unique ID of the short link"
          deprecated: true
        "id":
          type: "string"
          description: "The unique ID of the short link"
        "domain":
          type: "string"
          description: "The domain of the short link"
        "key":
          type: "string"
          description: "The key of the short link"
        "shortLink":
          type: "string"
          description: "The short link URL"
        "url":
          type: "string"
          description: "The destination URL of the short link"
        "createdAt":
          type: "string"
          description: "The creation timestamp of the short link"
        "leads":
          type: "number"
          description: "The number of leads from this link"
      required:
        - "link"
        - "id"
        - "domain"
        - "key"
        - "shortLink"
        - "url"
        - "createdAt"
        - "leads"
    "LeadsTopUrls":
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The destination URL"
        "leads":
          type: "number"
          description: "The number of leads from this URL"
      required:
        - "url"
        - "leads"
    "SalesCount":
      type: "object"
      properties:
        "sales":
          type: "number"
          description: "The total number of sales"
        "amount":
          type: "number"
          description: "The total amount of sales"
      required:
        - "sales"
        - "amount"
      title: "SalesCount"
    "SalesTimeseries":
      type: "object"
      properties:
        "start":
          type: "string"
          description: "The starting timestamp of the interval"
        "sales":
          type: "number"
          description: "The number of sales in the interval"
        "amount":
          type: "number"
          description: "The total amount of sales in the interval"
      required:
        - "start"
        - "sales"
        - "amount"
    "SalesCountries":
      type: "object"
      properties:
        "country":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "CI"
            - "HR"
            - "CU"
            - "CY"
            - "CZ"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MK"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RE"
            - "RO"
            - "RU"
            - "RW"
            - "SH"
            - "KN"
            - "LC"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "SC"
            - "SL"
            - "SG"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "AX"
            - "BQ"
            - "CW"
            - "GG"
            - "IM"
            - "JE"
            - "ME"
            - "BL"
            - "MF"
            - "RS"
            - "SX"
            - "SS"
            - "XK"
          description: "The 2-letter country code: https://d.to/geo"
        "sales":
          type: "number"
          description: "The number of sales from this country"
        "amount":
          type: "number"
          description: "The total amount of sales from this country"
      required:
        - "country"
        - "sales"
        - "amount"
    "SalesCities":
      type: "object"
      properties:
        "city":
          type: "string"
          description: "The name of the city"
        "country":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "CI"
            - "HR"
            - "CU"
            - "CY"
            - "CZ"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MK"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RE"
            - "RO"
            - "RU"
            - "RW"
            - "SH"
            - "KN"
            - "LC"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "SC"
            - "SL"
            - "SG"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "AX"
            - "BQ"
            - "CW"
            - "GG"
            - "IM"
            - "JE"
            - "ME"
            - "BL"
            - "MF"
            - "RS"
            - "SX"
            - "SS"
            - "XK"
          description: "The 2-letter country code of the city: https://d.to/geo"
        "sales":
          type: "number"
          description: "The number of sales from this city"
        "amount":
          type: "number"
          description: "The total amount of sales from this city"
      required:
        - "city"
        - "country"
        - "sales"
        - "amount"
    "SalesDevices":
      type: "object"
      properties:
        "device":
          type: "string"
          description: "The name of the device"
        "sales":
          type: "number"
          description: "The number of sales from this device"
        "amount":
          type: "number"
          description: "The total amount of sales from this device"
      required:
        - "device"
        - "sales"
        - "amount"
    "SalesBrowsers":
      type: "object"
      properties:
        "browser":
          type: "string"
          description: "The name of the browser"
        "sales":
          type: "number"
          description: "The number of sales from this browser"
        "amount":
          type: "number"
          description: "The total amount of sales from this browser"
      required:
        - "browser"
        - "sales"
        - "amount"
    "SalesOS":
      type: "object"
      properties:
        "os":
          type: "string"
          description: "The name of the OS"
        "sales":
          type: "number"
          description: "The number of sales from this OS"
        "amount":
          type: "number"
          description: "The total amount of sales from this OS"
      required:
        - "os"
        - "sales"
        - "amount"
    "SalesReferers":
      type: "object"
      properties:
        "referer":
          type: "string"
          description: "The name of the referer. If unknown, this will be `(direct)`"
        "sales":
          type: "number"
          description: "The number of sales from this referer"
        "amount":
          type: "number"
          description: "The total amount of sales from this referer"
      required:
        - "referer"
        - "sales"
        - "amount"
    "SalesTopLinks":
      type: "object"
      properties:
        "link":
          type: "string"
          description: "The unique ID of the short link"
          deprecated: true
        "id":
          type: "string"
          description: "The unique ID of the short link"
        "domain":
          type: "string"
          description: "The domain of the short link"
        "key":
          type: "string"
          description: "The key of the short link"
        "shortLink":
          type: "string"
          description: "The short link URL"
        "url":
          type: "string"
          description: "The destination URL of the short link"
        "createdAt":
          type: "string"
          description: "The creation timestamp of the short link"
        "sales":
          type: "number"
          description: "The number of sales from this link"
        "amount":
          type: "number"
          description: "The total amount of sales from this link"
      required:
        - "link"
        - "id"
        - "domain"
        - "key"
        - "shortLink"
        - "url"
        - "createdAt"
        - "sales"
        - "amount"
    "SalesTopUrls":
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The destination URL"
        "sales":
          type: "number"
          description: "The number of sales from this URL"
        "amount":
          type: "number"
          description: "The total amount of sales from this URL"
      required:
        - "url"
        - "sales"
        - "amount"
  responses:
    "400":
      description: "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "BadRequest"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "bad_request"
                    description: "A short code indicating the error code returned."
                    example: "bad_request"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#bad-request"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "401":
      description: "Although the HTTP standard specifies \"unauthorized\", semantically this response means \"unauthenticated\". That is, the client must authenticate itself to get the requested response."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "Unauthorized"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "unauthorized"
                    description: "A short code indicating the error code returned."
                    example: "unauthorized"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#unauthorized"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "403":
      description: "The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401 Unauthorized, the client's identity is known to the server."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "Forbidden"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "forbidden"
                    description: "A short code indicating the error code returned."
                    example: "forbidden"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#forbidden"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "404":
      description: "The server cannot find the requested resource."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "NotFound"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "not_found"
                    description: "A short code indicating the error code returned."
                    example: "not_found"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#not-found"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "409":
      description: "This response is sent when a request conflicts with the current state of the server."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "Conflict"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "conflict"
                    description: "A short code indicating the error code returned."
                    example: "conflict"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#conflict"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "410":
      description: "This response is sent when the requested content has been permanently deleted from server, with no forwarding address."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "InviteExpired"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "invite_expired"
                    description: "A short code indicating the error code returned."
                    example: "invite_expired"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#invite-expired"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "422":
      description: "The request was well-formed but was unable to be followed due to semantic errors."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "UnprocessableEntity"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "unprocessable_entity"
                    description: "A short code indicating the error code returned."
                    example: "unprocessable_entity"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#unprocessable-entity"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "429":
      description: "The user has sent too many requests in a given amount of time (\"rate limiting\")"
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "RateLimitExceeded"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "rate_limit_exceeded"
                    description: "A short code indicating the error code returned."
                    example: "rate_limit_exceeded"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#rate-limit_exceeded"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
    "500":
      description: "The server has encountered a situation it does not know how to handle."
      content:
        "application/json":
          schema:
            x-speakeasy-name-override: "InternalServerError"
            type: "object"
            properties:
              "error":
                type: "object"
                properties:
                  "code":
                    type: "string"
                    enum:
                      - "internal_server_error"
                    description: "A short code indicating the error code returned."
                    example: "internal_server_error"
                  "message":
                    x-speakeasy-error-message: true
                    type: "string"
                    description: "A human readable explanation of what went wrong."
                    example: "The requested resource was not found."
                  "doc_url":
                    type: "string"
                    description: "A link to our documentation with more details about this error code"
                    example: "https://dub.co/docs/api-reference/errors#internal-server_error"
                required:
                  - "code"
                  - "message"
            required:
              - "error"
